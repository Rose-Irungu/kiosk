{
    "sourceFile": "src/pages/Dashboardpages/Emergencypage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1754560342804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754560349065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import Card4 from \"../../components/Card4\";\r\n+import EmergencyStatsChart from \"../../components/Chart2\";\r\n+import EmergencyTable from \"../../components/tables/Emergencies\";\r\n+import Layout from \"../../components/layout/Layout\";\r\n+import { us}\r\n+import {\r\n+  fetchEmergencies,\r\n+  updateEmergency,\r\n+} from \"../../services/adminEmergencyServices\";\r\n+\r\n+export default function Emergencypage() {\r\n+  const [latest, setLatest] = useState(null);\r\n+  const [all, setAll] = useState([]);\r\n+  const [ongoingCount, setOngoingCount] = useState(0);\r\n+  const [resolvedCount, setResolvedCount] = useState(0);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n+\r\n+\r\n+  const getData = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+\r\n+      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+      const ongoingOnly = all.filter(\r\n+        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n+      );\r\n+\r\n+      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n+      setAll(all);\r\n+      setOngoingCount(ongoingCount);\r\n+      setResolvedCount(resolvedCount);\r\n+    } catch (err) {\r\n+      console.error(\"Error fetching emergencies:\", err);\r\n+      setError(err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    getData();\r\n+  }, []);\r\n+\r\n+  const filterEventsByTime = (events, filter) => {\r\n+    const now = new Date();\r\n+    return events.filter((e) => {\r\n+      const created = new Date(e.created_at);\r\n+      switch (filter) {\r\n+        case \"Today\":\r\n+          return created.toDateString() === now.toDateString();\r\n+        case \"This Week\": {\r\n+          const weekAgo = new Date();\r\n+          weekAgo.setDate(now.getDate() - 7);\r\n+          return created >= weekAgo;\r\n+        }\r\n+        case \"This Month\":\r\n+          return (\r\n+            created.getMonth() === now.getMonth() &&\r\n+            created.getFullYear() === now.getFullYear()\r\n+          );\r\n+        case \"This Year\":\r\n+          return created.getFullYear() === now.getFullYear();\r\n+        default:\r\n+          return true;\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n+\r\n+  return (\r\n+    <Layout>\r\n+      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n+        {/* ---- Upper Row ---- */}\r\n+        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n+          {/* Card4 - The Live Emergency Feed */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            {latest ? (\r\n+              <Card4\r\n+                id={latest?.id}\r\n+                floor={latest?.triggerer_floor_number}\r\n+                unit={latest?.triggerer_unit_number}\r\n+                name={latest?.triggered_by}\r\n+                status={latest?.emergency_status}\r\n+                onResolved={getData}\r\n+              />\r\n+            ) : (\r\n+              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n+                <p className=\"text-center text-gray-600 font-semibold\">\r\n+                  No unresolved emergencies\r\n+                </p>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Emergency Stats Chart */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            <EmergencyStatsChart\r\n+              ongoing={ongoingCount}\r\n+              resolved={resolvedCount}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* ---- Lower Row ---- */}\r\n+        <div className=\"w-full max-w-[1140px] mt-10\">\r\n+          <EmergencyTable\r\n+            events={filteredEvents.map((e) => ({\r\n+              id: e.id,\r\n+              location: e.emergency_location || \"Unknown\",\r\n+              visitor: e.triggered_by || \"Unknown\",\r\n+              type: e.emergency_type,\r\n+              time: new Date(e.created_at).toLocaleString(),\r\n+              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n+            }))}\r\n+            isLoading={loading}\r\n+            error={error}\r\n+            timeFilter={timeFilter}\r\n+            onTimeFilterChange={setTimeFilter}\r\n+            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n+            onStatusChange={async (action, event) => {\r\n+              try {\r\n+                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n+                await updateEmergency(event.id, newStatus);\r\n+\r\n+                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+                const nextOngoing = all.find(\r\n+                  (e) => e.emergency_status === \"ongoing\"\r\n+                );\r\n+\r\n+                setLatest(nextOngoing || null);\r\n+                setAll(all);\r\n+                setOngoingCount(ongoingCount);\r\n+                setResolvedCount(resolvedCount);\r\n+              } catch (err) {\r\n+                console.error(\"Failed to update emergency status:\", err);\r\n+              }\r\n+            }}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+    </Layout>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1754560358477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import Card4 from \"../../components/Card4\";\r\n+import EmergencyStatsChart from \"../../components/Chart2\";\r\n+import EmergencyTable from \"../../components/tables/Emergencies\";\r\n+import Layout from \"../../components/layout/Layout\";\r\n+import { useLocation } from \"react-router-dom\";\r\n+import {\r\n+  fetchEmergencies,\r\n+  updateEmergency,\r\n+} from \"../../services/adminEmergencyServices\";\r\n+\r\n+export default function Emergencypage() {\r\n+  const [latest, setLatest] = useState(null);\r\n+  const [all, setAll] = useState([]);\r\n+  const [ongoingCount, setOngoingCount] = useState(0);\r\n+  const [resolvedCount, setResolvedCount] = useState(0);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n+\r\n+\r\n+  const getData = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+\r\n+      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+      const ongoingOnly = all.filter(\r\n+        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n+      );\r\n+\r\n+      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n+      setAll(all);\r\n+      setOngoingCount(ongoingCount);\r\n+      setResolvedCount(resolvedCount);\r\n+    } catch (err) {\r\n+      console.error(\"Error fetching emergencies:\", err);\r\n+      setError(err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    getData();\r\n+  }, []);\r\n+\r\n+  const filterEventsByTime = (events, filter) => {\r\n+    const now = new Date();\r\n+    return events.filter((e) => {\r\n+      const created = new Date(e.created_at);\r\n+      switch (filter) {\r\n+        case \"Today\":\r\n+          return created.toDateString() === now.toDateString();\r\n+        case \"This Week\": {\r\n+          const weekAgo = new Date();\r\n+          weekAgo.setDate(now.getDate() - 7);\r\n+          return created >= weekAgo;\r\n+        }\r\n+        case \"This Month\":\r\n+          return (\r\n+            created.getMonth() === now.getMonth() &&\r\n+            created.getFullYear() === now.getFullYear()\r\n+          );\r\n+        case \"This Year\":\r\n+          return created.getFullYear() === now.getFullYear();\r\n+        default:\r\n+          return true;\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n+\r\n+  return (\r\n+    <Layout>\r\n+      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n+        {/* ---- Upper Row ---- */}\r\n+        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n+          {/* Card4 - The Live Emergency Feed */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            {latest ? (\r\n+              <Card4\r\n+                id={latest?.id}\r\n+                floor={latest?.triggerer_floor_number}\r\n+                unit={latest?.triggerer_unit_number}\r\n+                name={latest?.triggered_by}\r\n+                status={latest?.emergency_status}\r\n+                onResolved={getData}\r\n+              />\r\n+            ) : (\r\n+              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n+                <p className=\"text-center text-gray-600 font-semibold\">\r\n+                  No unresolved emergencies\r\n+                </p>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Emergency Stats Chart */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            <EmergencyStatsChart\r\n+              ongoing={ongoingCount}\r\n+              resolved={resolvedCount}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* ---- Lower Row ---- */}\r\n+        <div className=\"w-full max-w-[1140px] mt-10\">\r\n+          <EmergencyTable\r\n+            events={filteredEvents.map((e) => ({\r\n+              id: e.id,\r\n+              location: e.emergency_location || \"Unknown\",\r\n+              visitor: e.triggered_by || \"Unknown\",\r\n+              type: e.emergency_type,\r\n+              time: new Date(e.created_at).toLocaleString(),\r\n+              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n+            }))}\r\n+            isLoading={loading}\r\n+            error={error}\r\n+            timeFilter={timeFilter}\r\n+            onTimeFilterChange={setTimeFilter}\r\n+            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n+            onStatusChange={async (action, event) => {\r\n+              try {\r\n+                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n+                await updateEmergency(event.id, newStatus);\r\n+\r\n+                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+                const nextOngoing = all.find(\r\n+                  (e) => e.emergency_status === \"ongoing\"\r\n+                );\r\n+\r\n+                setLatest(nextOngoing || null);\r\n+                setAll(all);\r\n+                setOngoingCount(ongoingCount);\r\n+                setResolvedCount(resolvedCount);\r\n+              } catch (err) {\r\n+                console.error(\"Failed to update emergency status:\", err);\r\n+              }\r\n+            }}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+    </Layout>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1754560568636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import Card4 from \"../../components/Card4\";\r\n+import EmergencyStatsChart from \"../../components/Chart2\";\r\n+import EmergencyTable from \"../../components/tables/Emergencies\";\r\n+import Layout from \"../../components/layout/Layout\";\r\n+import { useLocation } from \"react-router-dom\";\r\n+import {\r\n+  fetchEmergencies,\r\n+  updateEmergency,\r\n+} from \"../../services/adminEmergencyServices\";\r\n+\r\n+export default function Emergencypage() {\r\n+  const [latest, setLatest] = useState(null);\r\n+  const [all, setAll] = useState([]);\r\n+  const [ongoingCount, setOngoingCount] = useState(0);\r\n+  const [resolvedCount, setResolvedCount] = useState(0);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n+\r\n+  \r\n+\r\n+\r\n+  const getData = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+\r\n+      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+      const ongoingOnly = all.filter(\r\n+        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n+      );\r\n+\r\n+      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n+      setAll(all);\r\n+      setOngoingCount(ongoingCount);\r\n+      setResolvedCount(resolvedCount);\r\n+    } catch (err) {\r\n+      console.error(\"Error fetching emergencies:\", err);\r\n+      setError(err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    getData();\r\n+  }, []);\r\n+\r\n+  const filterEventsByTime = (events, filter) => {\r\n+    const now = new Date();\r\n+    return events.filter((e) => {\r\n+      const created = new Date(e.created_at);\r\n+      switch (filter) {\r\n+        case \"Today\":\r\n+          return created.toDateString() === now.toDateString();\r\n+        case \"This Week\": {\r\n+          const weekAgo = new Date();\r\n+          weekAgo.setDate(now.getDate() - 7);\r\n+          return created >= weekAgo;\r\n+        }\r\n+        case \"This Month\":\r\n+          return (\r\n+            created.getMonth() === now.getMonth() &&\r\n+            created.getFullYear() === now.getFullYear()\r\n+          );\r\n+        case \"This Year\":\r\n+          return created.getFullYear() === now.getFullYear();\r\n+        default:\r\n+          return true;\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n+\r\n+  return (\r\n+    <Layout>\r\n+      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n+        {/* ---- Upper Row ---- */}\r\n+        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n+          {/* Card4 - The Live Emergency Feed */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            {latest ? (\r\n+              <Card4\r\n+                id={latest?.id}\r\n+                floor={latest?.triggerer_floor_number}\r\n+                unit={latest?.triggerer_unit_number}\r\n+                name={latest?.triggered_by}\r\n+                status={latest?.emergency_status}\r\n+                onResolved={getData}\r\n+              />\r\n+            ) : (\r\n+              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n+                <p className=\"text-center text-gray-600 font-semibold\">\r\n+                  No unresolved emergencies\r\n+                </p>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Emergency Stats Chart */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            <EmergencyStatsChart\r\n+              ongoing={ongoingCount}\r\n+              resolved={resolvedCount}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* ---- Lower Row ---- */}\r\n+        <div className=\"w-full max-w-[1140px] mt-10\">\r\n+          <EmergencyTable\r\n+            events={filteredEvents.map((e) => ({\r\n+              id: e.id,\r\n+              location: e.emergency_location || \"Unknown\",\r\n+              visitor: e.triggered_by || \"Unknown\",\r\n+              type: e.emergency_type,\r\n+              time: new Date(e.created_at).toLocaleString(),\r\n+              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n+            }))}\r\n+            isLoading={loading}\r\n+            error={error}\r\n+            timeFilter={timeFilter}\r\n+            onTimeFilterChange={setTimeFilter}\r\n+            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n+            onStatusChange={async (action, event) => {\r\n+              try {\r\n+                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n+                await updateEmergency(event.id, newStatus);\r\n+\r\n+                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+                const nextOngoing = all.find(\r\n+                  (e) => e.emergency_status === \"ongoing\"\r\n+                );\r\n+\r\n+                setLatest(nextOngoing || null);\r\n+                setAll(all);\r\n+                setOngoingCount(ongoingCount);\r\n+                setResolvedCount(resolvedCount);\r\n+              } catch (err) {\r\n+                console.error(\"Failed to update emergency status:\", err);\r\n+              }\r\n+            }}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+    </Layout>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1754560574217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import Card4 from \"../../components/Card4\";\r\n+import EmergencyStatsChart from \"../../components/Chart2\";\r\n+import EmergencyTable from \"../../components/tables/Emergencies\";\r\n+import Layout from \"../../components/layout/Layout\";\r\n+import { useLocation } from \"react-router-dom\";\r\n+import {\r\n+  fetchEmergencies,\r\n+  updateEmergency,\r\n+} from \"../../services/adminEmergencyServices\";\r\n+\r\n+export default function Emergencypage() {\r\n+  const [latest, setLatest] = useState(null);\r\n+  const [all, setAll] = useState([]);\r\n+  const [ongoingCount, setOngoingCount] = useState(0);\r\n+  const [resolvedCount, setResolvedCount] = useState(0);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n+\r\n+  const location = useLocation();\r\n+\r\n+\r\n+  const getData = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+\r\n+      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+      const ongoingOnly = all.filter(\r\n+        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n+      );\r\n+\r\n+      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n+      setAll(all);\r\n+      setOngoingCount(ongoingCount);\r\n+      setResolvedCount(resolvedCount);\r\n+    } catch (err) {\r\n+      console.error(\"Error fetching emergencies:\", err);\r\n+      setError(err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    getData();\r\n+  }, []);\r\n+\r\n+  const filterEventsByTime = (events, filter) => {\r\n+    const now = new Date();\r\n+    return events.filter((e) => {\r\n+      const created = new Date(e.created_at);\r\n+      switch (filter) {\r\n+        case \"Today\":\r\n+          return created.toDateString() === now.toDateString();\r\n+        case \"This Week\": {\r\n+          const weekAgo = new Date();\r\n+          weekAgo.setDate(now.getDate() - 7);\r\n+          return created >= weekAgo;\r\n+        }\r\n+        case \"This Month\":\r\n+          return (\r\n+            created.getMonth() === now.getMonth() &&\r\n+            created.getFullYear() === now.getFullYear()\r\n+          );\r\n+        case \"This Year\":\r\n+          return created.getFullYear() === now.getFullYear();\r\n+        default:\r\n+          return true;\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n+\r\n+  return (\r\n+    <Layout>\r\n+      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n+        {/* ---- Upper Row ---- */}\r\n+        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n+          {/* Card4 - The Live Emergency Feed */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            {latest ? (\r\n+              <Card4\r\n+                id={latest?.id}\r\n+                floor={latest?.triggerer_floor_number}\r\n+                unit={latest?.triggerer_unit_number}\r\n+                name={latest?.triggered_by}\r\n+                status={latest?.emergency_status}\r\n+                onResolved={getData}\r\n+              />\r\n+            ) : (\r\n+              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n+                <p className=\"text-center text-gray-600 font-semibold\">\r\n+                  No unresolved emergencies\r\n+                </p>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+\r\n+          {/* Emergency Stats Chart */}\r\n+          <div className=\"w-full md:w-1/2\">\r\n+            <EmergencyStatsChart\r\n+              ongoing={ongoingCount}\r\n+              resolved={resolvedCount}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* ---- Lower Row ---- */}\r\n+        <div className=\"w-full max-w-[1140px] mt-10\">\r\n+          <EmergencyTable\r\n+            events={filteredEvents.map((e) => ({\r\n+              id: e.id,\r\n+              location: e.emergency_location || \"Unknown\",\r\n+              visitor: e.triggered_by || \"Unknown\",\r\n+              type: e.emergency_type,\r\n+              time: new Date(e.created_at).toLocaleString(),\r\n+              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n+            }))}\r\n+            isLoading={loading}\r\n+            error={error}\r\n+            timeFilter={timeFilter}\r\n+            onTimeFilterChange={setTimeFilter}\r\n+            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n+            onStatusChange={async (action, event) => {\r\n+              try {\r\n+                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n+                await updateEmergency(event.id, newStatus);\r\n+\r\n+                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n+\r\n+                const nextOngoing = all.find(\r\n+                  (e) => e.emergency_status === \"ongoing\"\r\n+                );\r\n+\r\n+                setLatest(nextOngoing || null);\r\n+                setAll(all);\r\n+                setOngoingCount(ongoingCount);\r\n+                setResolvedCount(resolvedCount);\r\n+              } catch (err) {\r\n+                console.error(\"Failed to update emergency status:\", err);\r\n+              }\r\n+            }}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+    </Layout>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1754560583528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n   const [error, setError] = useState(null);\r\n   const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n \r\n   const location = useLocation();\r\n+  const sa\r\n \r\n \r\n   const getData = async () => {\r\n     try {\r\n@@ -151,614 +152,4 @@\n       </div>\r\n     </Layout>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import Card4 from \"../../components/Card4\";\r\n-import EmergencyStatsChart from \"../../components/Chart2\";\r\n-import EmergencyTable from \"../../components/tables/Emergencies\";\r\n-import Layout from \"../../components/layout/Layout\";\r\n-import { useLocation } from \"react-router-dom\";\r\n-import {\r\n-  fetchEmergencies,\r\n-  updateEmergency,\r\n-} from \"../../services/adminEmergencyServices\";\r\n-\r\n-export default function Emergencypage() {\r\n-  const [latest, setLatest] = useState(null);\r\n-  const [all, setAll] = useState([]);\r\n-  const [ongoingCount, setOngoingCount] = useState(0);\r\n-  const [resolvedCount, setResolvedCount] = useState(0);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n-\r\n-  \r\n-\r\n-\r\n-  const getData = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-\r\n-      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-      const ongoingOnly = all.filter(\r\n-        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n-      );\r\n-\r\n-      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n-      setAll(all);\r\n-      setOngoingCount(ongoingCount);\r\n-      setResolvedCount(resolvedCount);\r\n-    } catch (err) {\r\n-      console.error(\"Error fetching emergencies:\", err);\r\n-      setError(err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    getData();\r\n-  }, []);\r\n-\r\n-  const filterEventsByTime = (events, filter) => {\r\n-    const now = new Date();\r\n-    return events.filter((e) => {\r\n-      const created = new Date(e.created_at);\r\n-      switch (filter) {\r\n-        case \"Today\":\r\n-          return created.toDateString() === now.toDateString();\r\n-        case \"This Week\": {\r\n-          const weekAgo = new Date();\r\n-          weekAgo.setDate(now.getDate() - 7);\r\n-          return created >= weekAgo;\r\n-        }\r\n-        case \"This Month\":\r\n-          return (\r\n-            created.getMonth() === now.getMonth() &&\r\n-            created.getFullYear() === now.getFullYear()\r\n-          );\r\n-        case \"This Year\":\r\n-          return created.getFullYear() === now.getFullYear();\r\n-        default:\r\n-          return true;\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n-\r\n-  return (\r\n-    <Layout>\r\n-      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n-        {/* ---- Upper Row ---- */}\r\n-        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n-          {/* Card4 - The Live Emergency Feed */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            {latest ? (\r\n-              <Card4\r\n-                id={latest?.id}\r\n-                floor={latest?.triggerer_floor_number}\r\n-                unit={latest?.triggerer_unit_number}\r\n-                name={latest?.triggered_by}\r\n-                status={latest?.emergency_status}\r\n-                onResolved={getData}\r\n-              />\r\n-            ) : (\r\n-              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n-                <p className=\"text-center text-gray-600 font-semibold\">\r\n-                  No unresolved emergencies\r\n-                </p>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Emergency Stats Chart */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            <EmergencyStatsChart\r\n-              ongoing={ongoingCount}\r\n-              resolved={resolvedCount}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-\r\n-        {/* ---- Lower Row ---- */}\r\n-        <div className=\"w-full max-w-[1140px] mt-10\">\r\n-          <EmergencyTable\r\n-            events={filteredEvents.map((e) => ({\r\n-              id: e.id,\r\n-              location: e.emergency_location || \"Unknown\",\r\n-              visitor: e.triggered_by || \"Unknown\",\r\n-              type: e.emergency_type,\r\n-              time: new Date(e.created_at).toLocaleString(),\r\n-              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n-            }))}\r\n-            isLoading={loading}\r\n-            error={error}\r\n-            timeFilter={timeFilter}\r\n-            onTimeFilterChange={setTimeFilter}\r\n-            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n-            onStatusChange={async (action, event) => {\r\n-              try {\r\n-                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n-                await updateEmergency(event.id, newStatus);\r\n-\r\n-                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-                const nextOngoing = all.find(\r\n-                  (e) => e.emergency_status === \"ongoing\"\r\n-                );\r\n-\r\n-                setLatest(nextOngoing || null);\r\n-                setAll(all);\r\n-                setOngoingCount(ongoingCount);\r\n-                setResolvedCount(resolvedCount);\r\n-              } catch (err) {\r\n-                console.error(\"Failed to update emergency status:\", err);\r\n-              }\r\n-            }}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-    </Layout>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import Card4 from \"../../components/Card4\";\r\n-import EmergencyStatsChart from \"../../components/Chart2\";\r\n-import EmergencyTable from \"../../components/tables/Emergencies\";\r\n-import Layout from \"../../components/layout/Layout\";\r\n-import { useLocation } from \"react-router-dom\";\r\n-import {\r\n-  fetchEmergencies,\r\n-  updateEmergency,\r\n-} from \"../../services/adminEmergencyServices\";\r\n-\r\n-export default function Emergencypage() {\r\n-  const [latest, setLatest] = useState(null);\r\n-  const [all, setAll] = useState([]);\r\n-  const [ongoingCount, setOngoingCount] = useState(0);\r\n-  const [resolvedCount, setResolvedCount] = useState(0);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n-\r\n-\r\n-  const getData = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-\r\n-      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-      const ongoingOnly = all.filter(\r\n-        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n-      );\r\n-\r\n-      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n-      setAll(all);\r\n-      setOngoingCount(ongoingCount);\r\n-      setResolvedCount(resolvedCount);\r\n-    } catch (err) {\r\n-      console.error(\"Error fetching emergencies:\", err);\r\n-      setError(err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    getData();\r\n-  }, []);\r\n-\r\n-  const filterEventsByTime = (events, filter) => {\r\n-    const now = new Date();\r\n-    return events.filter((e) => {\r\n-      const created = new Date(e.created_at);\r\n-      switch (filter) {\r\n-        case \"Today\":\r\n-          return created.toDateString() === now.toDateString();\r\n-        case \"This Week\": {\r\n-          const weekAgo = new Date();\r\n-          weekAgo.setDate(now.getDate() - 7);\r\n-          return created >= weekAgo;\r\n-        }\r\n-        case \"This Month\":\r\n-          return (\r\n-            created.getMonth() === now.getMonth() &&\r\n-            created.getFullYear() === now.getFullYear()\r\n-          );\r\n-        case \"This Year\":\r\n-          return created.getFullYear() === now.getFullYear();\r\n-        default:\r\n-          return true;\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n-\r\n-  return (\r\n-    <Layout>\r\n-      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n-        {/* ---- Upper Row ---- */}\r\n-        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n-          {/* Card4 - The Live Emergency Feed */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            {latest ? (\r\n-              <Card4\r\n-                id={latest?.id}\r\n-                floor={latest?.triggerer_floor_number}\r\n-                unit={latest?.triggerer_unit_number}\r\n-                name={latest?.triggered_by}\r\n-                status={latest?.emergency_status}\r\n-                onResolved={getData}\r\n-              />\r\n-            ) : (\r\n-              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n-                <p className=\"text-center text-gray-600 font-semibold\">\r\n-                  No unresolved emergencies\r\n-                </p>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Emergency Stats Chart */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            <EmergencyStatsChart\r\n-              ongoing={ongoingCount}\r\n-              resolved={resolvedCount}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-\r\n-        {/* ---- Lower Row ---- */}\r\n-        <div className=\"w-full max-w-[1140px] mt-10\">\r\n-          <EmergencyTable\r\n-            events={filteredEvents.map((e) => ({\r\n-              id: e.id,\r\n-              location: e.emergency_location || \"Unknown\",\r\n-              visitor: e.triggered_by || \"Unknown\",\r\n-              type: e.emergency_type,\r\n-              time: new Date(e.created_at).toLocaleString(),\r\n-              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n-            }))}\r\n-            isLoading={loading}\r\n-            error={error}\r\n-            timeFilter={timeFilter}\r\n-            onTimeFilterChange={setTimeFilter}\r\n-            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n-            onStatusChange={async (action, event) => {\r\n-              try {\r\n-                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n-                await updateEmergency(event.id, newStatus);\r\n-\r\n-                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-                const nextOngoing = all.find(\r\n-                  (e) => e.emergency_status === \"ongoing\"\r\n-                );\r\n-\r\n-                setLatest(nextOngoing || null);\r\n-                setAll(all);\r\n-                setOngoingCount(ongoingCount);\r\n-                setResolvedCount(resolvedCount);\r\n-              } catch (err) {\r\n-                console.error(\"Failed to update emergency status:\", err);\r\n-              }\r\n-            }}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-    </Layout>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import Card4 from \"../../components/Card4\";\r\n-import EmergencyStatsChart from \"../../components/Chart2\";\r\n-import EmergencyTable from \"../../components/tables/Emergencies\";\r\n-import Layout from \"../../components/layout/Layout\";\r\n-import { us}\r\n-import {\r\n-  fetchEmergencies,\r\n-  updateEmergency,\r\n-} from \"../../services/adminEmergencyServices\";\r\n-\r\n-export default function Emergencypage() {\r\n-  const [latest, setLatest] = useState(null);\r\n-  const [all, setAll] = useState([]);\r\n-  const [ongoingCount, setOngoingCount] = useState(0);\r\n-  const [resolvedCount, setResolvedCount] = useState(0);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n-\r\n-\r\n-  const getData = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-\r\n-      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-      const ongoingOnly = all.filter(\r\n-        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n-      );\r\n-\r\n-      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n-      setAll(all);\r\n-      setOngoingCount(ongoingCount);\r\n-      setResolvedCount(resolvedCount);\r\n-    } catch (err) {\r\n-      console.error(\"Error fetching emergencies:\", err);\r\n-      setError(err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    getData();\r\n-  }, []);\r\n-\r\n-  const filterEventsByTime = (events, filter) => {\r\n-    const now = new Date();\r\n-    return events.filter((e) => {\r\n-      const created = new Date(e.created_at);\r\n-      switch (filter) {\r\n-        case \"Today\":\r\n-          return created.toDateString() === now.toDateString();\r\n-        case \"This Week\": {\r\n-          const weekAgo = new Date();\r\n-          weekAgo.setDate(now.getDate() - 7);\r\n-          return created >= weekAgo;\r\n-        }\r\n-        case \"This Month\":\r\n-          return (\r\n-            created.getMonth() === now.getMonth() &&\r\n-            created.getFullYear() === now.getFullYear()\r\n-          );\r\n-        case \"This Year\":\r\n-          return created.getFullYear() === now.getFullYear();\r\n-        default:\r\n-          return true;\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n-\r\n-  return (\r\n-    <Layout>\r\n-      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n-        {/* ---- Upper Row ---- */}\r\n-        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n-          {/* Card4 - The Live Emergency Feed */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            {latest ? (\r\n-              <Card4\r\n-                id={latest?.id}\r\n-                floor={latest?.triggerer_floor_number}\r\n-                unit={latest?.triggerer_unit_number}\r\n-                name={latest?.triggered_by}\r\n-                status={latest?.emergency_status}\r\n-                onResolved={getData}\r\n-              />\r\n-            ) : (\r\n-              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n-                <p className=\"text-center text-gray-600 font-semibold\">\r\n-                  No unresolved emergencies\r\n-                </p>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Emergency Stats Chart */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            <EmergencyStatsChart\r\n-              ongoing={ongoingCount}\r\n-              resolved={resolvedCount}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-\r\n-        {/* ---- Lower Row ---- */}\r\n-        <div className=\"w-full max-w-[1140px] mt-10\">\r\n-          <EmergencyTable\r\n-            events={filteredEvents.map((e) => ({\r\n-              id: e.id,\r\n-              location: e.emergency_location || \"Unknown\",\r\n-              visitor: e.triggered_by || \"Unknown\",\r\n-              type: e.emergency_type,\r\n-              time: new Date(e.created_at).toLocaleString(),\r\n-              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n-            }))}\r\n-            isLoading={loading}\r\n-            error={error}\r\n-            timeFilter={timeFilter}\r\n-            onTimeFilterChange={setTimeFilter}\r\n-            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n-            onStatusChange={async (action, event) => {\r\n-              try {\r\n-                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n-                await updateEmergency(event.id, newStatus);\r\n-\r\n-                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-                const nextOngoing = all.find(\r\n-                  (e) => e.emergency_status === \"ongoing\"\r\n-                );\r\n-\r\n-                setLatest(nextOngoing || null);\r\n-                setAll(all);\r\n-                setOngoingCount(ongoingCount);\r\n-                setResolvedCount(resolvedCount);\r\n-              } catch (err) {\r\n-                console.error(\"Failed to update emergency status:\", err);\r\n-              }\r\n-            }}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-    </Layout>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-import Card4 from \"../../components/Card4\";\r\n-import EmergencyStatsChart from \"../../components/Chart2\";\r\n-import EmergencyTable from \"../../components/tables/Emergencies\";\r\n-import Layout from \"../../components/layout/Layout\";\r\n-\r\n-import {\r\n-  fetchEmergencies,\r\n-  updateEmergency,\r\n-} from \"../../services/adminEmergencyServices\";\r\n-\r\n-export default function Emergencypage() {\r\n-  const [latest, setLatest] = useState(null);\r\n-  const [all, setAll] = useState([]);\r\n-  const [ongoingCount, setOngoingCount] = useState(0);\r\n-  const [resolvedCount, setResolvedCount] = useState(0);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n-\r\n-\r\n-  const getData = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-\r\n-      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-      const ongoingOnly = all.filter(\r\n-        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n-      );\r\n-\r\n-      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n-      setAll(all);\r\n-      setOngoingCount(ongoingCount);\r\n-      setResolvedCount(resolvedCount);\r\n-    } catch (err) {\r\n-      console.error(\"Error fetching emergencies:\", err);\r\n-      setError(err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    getData();\r\n-  }, []);\r\n-\r\n-  const filterEventsByTime = (events, filter) => {\r\n-    const now = new Date();\r\n-    return events.filter((e) => {\r\n-      const created = new Date(e.created_at);\r\n-      switch (filter) {\r\n-        case \"Today\":\r\n-          return created.toDateString() === now.toDateString();\r\n-        case \"This Week\": {\r\n-          const weekAgo = new Date();\r\n-          weekAgo.setDate(now.getDate() - 7);\r\n-          return created >= weekAgo;\r\n-        }\r\n-        case \"This Month\":\r\n-          return (\r\n-            created.getMonth() === now.getMonth() &&\r\n-            created.getFullYear() === now.getFullYear()\r\n-          );\r\n-        case \"This Year\":\r\n-          return created.getFullYear() === now.getFullYear();\r\n-        default:\r\n-          return true;\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n-\r\n-  return (\r\n-    <Layout>\r\n-      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n-        {/* ---- Upper Row ---- */}\r\n-        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n-          {/* Card4 - The Live Emergency Feed */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            {latest ? (\r\n-              <Card4\r\n-                id={latest?.id}\r\n-                floor={latest?.triggerer_floor_number}\r\n-                unit={latest?.triggerer_unit_number}\r\n-                name={latest?.triggered_by}\r\n-                status={latest?.emergency_status}\r\n-                onResolved={getData}\r\n-              />\r\n-            ) : (\r\n-              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n-                <p className=\"text-center text-gray-600 font-semibold\">\r\n-                  No unresolved emergencies\r\n-                </p>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-\r\n-          {/* Emergency Stats Chart */}\r\n-          <div className=\"w-full md:w-1/2\">\r\n-            <EmergencyStatsChart\r\n-              ongoing={ongoingCount}\r\n-              resolved={resolvedCount}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-\r\n-        {/* ---- Lower Row ---- */}\r\n-        <div className=\"w-full max-w-[1140px] mt-10\">\r\n-          <EmergencyTable\r\n-            events={filteredEvents.map((e) => ({\r\n-              id: e.id,\r\n-              location: e.emergency_location || \"Unknown\",\r\n-              visitor: e.triggered_by || \"Unknown\",\r\n-              type: e.emergency_type,\r\n-              time: new Date(e.created_at).toLocaleString(),\r\n-              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n-            }))}\r\n-            isLoading={loading}\r\n-            error={error}\r\n-            timeFilter={timeFilter}\r\n-            onTimeFilterChange={setTimeFilter}\r\n-            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n-            onStatusChange={async (action, event) => {\r\n-              try {\r\n-                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n-                await updateEmergency(event.id, newStatus);\r\n-\r\n-                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n-\r\n-                const nextOngoing = all.find(\r\n-                  (e) => e.emergency_status === \"ongoing\"\r\n-                );\r\n-\r\n-                setLatest(nextOngoing || null);\r\n-                setAll(all);\r\n-                setOngoingCount(ongoingCount);\r\n-                setResolvedCount(resolvedCount);\r\n-              } catch (err) {\r\n-                console.error(\"Failed to update emergency status:\", err);\r\n-              }\r\n-            }}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-    </Layout>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1754560818179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n   const [error, setError] = useState(null);\r\n   const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n \r\n   const location = useLocation();\r\n-  const sa\r\n \r\n \r\n+\r\n   const getData = async () => {\r\n     try {\r\n       setLoading(true);\r\n \r\n"
                }
            ],
            "date": 1754560342804,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport Card4 from \"../../components/Card4\";\r\nimport EmergencyStatsChart from \"../../components/Chart2\";\r\nimport EmergencyTable from \"../../components/tables/Emergencies\";\r\nimport Layout from \"../../components/layout/Layout\";\r\n\r\nimport {\r\n  fetchEmergencies,\r\n  updateEmergency,\r\n} from \"../../services/adminEmergencyServices\";\r\n\r\nexport default function Emergencypage() {\r\n  const [latest, setLatest] = useState(null);\r\n  const [all, setAll] = useState([]);\r\n  const [ongoingCount, setOngoingCount] = useState(0);\r\n  const [resolvedCount, setResolvedCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [timeFilter, setTimeFilter] = useState(\"This Week\");\r\n\r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n\r\n      const ongoingOnly = all.filter(\r\n        (e) => e.emergency_status?.toLowerCase() === \"ongoing\"\r\n      );\r\n\r\n      setLatest(ongoingOnly.length > 0 ? ongoingOnly[0] : null);\r\n      setAll(all);\r\n      setOngoingCount(ongoingCount);\r\n      setResolvedCount(resolvedCount);\r\n    } catch (err) {\r\n      console.error(\"Error fetching emergencies:\", err);\r\n      setError(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const filterEventsByTime = (events, filter) => {\r\n    const now = new Date();\r\n    return events.filter((e) => {\r\n      const created = new Date(e.created_at);\r\n      switch (filter) {\r\n        case \"Today\":\r\n          return created.toDateString() === now.toDateString();\r\n        case \"This Week\": {\r\n          const weekAgo = new Date();\r\n          weekAgo.setDate(now.getDate() - 7);\r\n          return created >= weekAgo;\r\n        }\r\n        case \"This Month\":\r\n          return (\r\n            created.getMonth() === now.getMonth() &&\r\n            created.getFullYear() === now.getFullYear()\r\n          );\r\n        case \"This Year\":\r\n          return created.getFullYear() === now.getFullYear();\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  };\r\n\r\n  const filteredEvents = filterEventsByTime(all, timeFilter);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"flex flex-col min-h-screen w-full items-center px-4 md:px-8\">\r\n        {/* ---- Upper Row ---- */}\r\n        <div className=\"flex flex-col md:flex-row w-full max-w-[1140px] gap-6 md:gap-8\">\r\n          {/* Card4 - The Live Emergency Feed */}\r\n          <div className=\"w-full md:w-1/2\">\r\n            {latest ? (\r\n              <Card4\r\n                id={latest?.id}\r\n                floor={latest?.triggerer_floor_number}\r\n                unit={latest?.triggerer_unit_number}\r\n                name={latest?.triggered_by}\r\n                status={latest?.emergency_status}\r\n                onResolved={getData}\r\n              />\r\n            ) : (\r\n              <div className=\"bg-white p-6 rounded shadow w-full\">\r\n                <p className=\"text-center text-gray-600 font-semibold\">\r\n                  No unresolved emergencies\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Emergency Stats Chart */}\r\n          <div className=\"w-full md:w-1/2\">\r\n            <EmergencyStatsChart\r\n              ongoing={ongoingCount}\r\n              resolved={resolvedCount}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* ---- Lower Row ---- */}\r\n        <div className=\"w-full max-w-[1140px] mt-10\">\r\n          <EmergencyTable\r\n            events={filteredEvents.map((e) => ({\r\n              id: e.id,\r\n              location: e.emergency_location || \"Unknown\",\r\n              visitor: e.triggered_by || \"Unknown\",\r\n              type: e.emergency_type,\r\n              time: new Date(e.created_at).toLocaleString(),\r\n              status: e.emergency_status === \"resolved\" ? \"Resolved\" : \"Ongoing\",\r\n            }))}\r\n            isLoading={loading}\r\n            error={error}\r\n            timeFilter={timeFilter}\r\n            onTimeFilterChange={setTimeFilter}\r\n            highlightConditions={[{ emergency_status: \"ongoing\" }]}\r\n            onStatusChange={async (action, event) => {\r\n              try {\r\n                const newStatus = action === \"Resolved\" ? \"resolved\" : \"ongoing\";\r\n                await updateEmergency(event.id, newStatus);\r\n\r\n                const { all, ongoingCount, resolvedCount } = await fetchEmergencies();\r\n\r\n                const nextOngoing = all.find(\r\n                  (e) => e.emergency_status === \"ongoing\"\r\n                );\r\n\r\n                setLatest(nextOngoing || null);\r\n                setAll(all);\r\n                setOngoingCount(ongoingCount);\r\n                setResolvedCount(resolvedCount);\r\n              } catch (err) {\r\n                console.error(\"Failed to update emergency status:\", err);\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n"
        }
    ]
}