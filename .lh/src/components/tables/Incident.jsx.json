{
    "sourceFile": "src/components/tables/Incident.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753077303366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753077303366,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCaption,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { MoreHorizontal } from \"lucide-react\";\r\n\r\nconst statusStyles = {\r\n  new: \"bg-red-100 text-red-700\",\r\n  \"under_review\": \"bg-yellow-100 text-yellow-700\", \r\n  resolved: \"bg-green-100 text-green-700\",\r\n};\r\n\r\nexport default function IncidentTable({ incidentReports }) {\r\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\r\n  const [showActionsFor, setShowActionsFor] = useState(null);\r\n  const [localIncidentReports, setLocalIncidentReports] = useState(incidentReports || []);\r\n\r\n  // Update local state when props change\r\n  React.useEffect(() => {\r\n    setLocalIncidentReports(incidentReports || []);\r\n  }, [incidentReports]);\r\n\r\n  // Get unique statuses from data for filter buttons\r\n  const availableStatuses = useMemo(() => {\r\n    const statuses = new Set(localIncidentReports?.map(report => report.incident_status));\r\n    return Array.from(statuses).filter(Boolean);\r\n  }, [localIncidentReports]);\r\n\r\n  // Filter incidents based on selected status\r\n  const filteredIncidents = useMemo(() => {\r\n    if (!localIncidentReports) return [];\r\n    if (selectedFilter === \"all\") return localIncidentReports;\r\n    return localIncidentReports.filter(report => report.incident_status === selectedFilter);\r\n  }, [localIncidentReports, selectedFilter]);\r\n\r\n  // Get counts for each status\r\n  const statusCounts = useMemo(() => {\r\n    const counts = {};\r\n    localIncidentReports?.forEach(report => {\r\n      const status = report.incident_status;\r\n      counts[status] = (counts[status] || 0) + 1;\r\n    });\r\n    return counts;\r\n  }, [localIncidentReports]);\r\n\r\n  const handleStatusUpdate = (reportId, newStatus) => {\r\n    // Update status in frontend only\r\n    setLocalIncidentReports(prev => \r\n      prev.map(report => \r\n        report.id === reportId \r\n          ? { ...report, incident_status: newStatus }\r\n          : report\r\n      )\r\n    );\r\n    setShowActionsFor(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-6xl mx-auto bg-white p-6 rounded-xl shadow-sm mt-10\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-2xl font-semibold\">Reported Incidents</h2>\r\n        <div className=\"relative\">\r\n          <select className=\"flex h-10 items-center rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\">\r\n            <option>Today</option>\r\n            <option>This Week</option>\r\n            <option>This Month</option>\r\n            <option>This Year</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Status Filter Buttons */}\r\n      <div className=\"flex flex-wrap gap-2 mb-6\">\r\n        {/* <button\r\n          onClick={() => setSelectedFilter(\"all\")}\r\n          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n            selectedFilter === \"all\"\r\n              ? \"bg-blue-100 text-blue-700 border border-blue-200\"\r\n              : \"bg-gray-50 text-gray-600 hover:bg-gray-100 border border-gray-200\"\r\n          }`}\r\n        >\r\n          All ({localIncidentReports?.length || 0})\r\n        </button> */}\r\n        \r\n        {availableStatuses.map(status => (\r\n          <button\r\n            key={status}\r\n            onClick={() => setSelectedFilter(status)}\r\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n              selectedFilter === status\r\n                ? statusStyles[status] + \" border border-current\"\r\n                : \"bg-gray-50 text-gray-600 hover:bg-gray-100 border border-gray-200\"\r\n            }`}\r\n          >\r\n            {status?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())} ({statusCounts[status] || 0})\r\n          </button>\r\n        ))}\r\n      </div>\r\n      \r\n      <Table>\r\n        <TableCaption className=\"sr-only\">A list of incident reports.</TableCaption>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead className=\"font-medium text-muted-foreground\">Reporter Name</TableHead>\r\n            <TableHead className=\"font-medium text-muted-foreground\">Reporter Role</TableHead>\r\n            <TableHead className=\"font-medium text-muted-foreground\">Incident Type</TableHead>\r\n            <TableHead className=\"font-medium text-muted-foreground\">Short Description</TableHead>\r\n            <TableHead className=\"font-medium text-muted-foreground\">Status</TableHead>\r\n            <TableHead className=\"font-medium text-muted-foreground\">Action</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {filteredIncidents?.length > 0 ? (\r\n            filteredIncidents.map((report) => (\r\n              <TableRow\r\n                key={report.id}\r\n                className={\r\n                  (report.reporter_name === \"George Weru\" && report.incident_status === \"new\") ||\r\n                  (report.reporter_name === \"Lewis Oduor\" && report.incident_status === \"resolved\")\r\n                    ? \"bg-[#f2f7f3]\"\r\n                    : \"\"\r\n                }\r\n              >\r\n                <TableCell className=\"font-medium\">{report.reporter_name}</TableCell>\r\n                <TableCell className=\"capitalize\">{report.reporter_role}</TableCell>\r\n                <TableCell className=\"capitalize\">{report.incident_type?.replace(/_/g, ' ')}</TableCell>\r\n                <TableCell>{report.incident_description}</TableCell>\r\n                <TableCell>\r\n                  <span\r\n                    className={`text-xs font-medium px-3 py-1 rounded-full capitalize ${\r\n                      statusStyles[report.incident_status] || \"bg-gray-100 text-gray-700\"\r\n                    }`}\r\n                  >\r\n                    {report.incident_status?.replace(/_/g, ' ')}\r\n                  </span>\r\n                </TableCell>\r\n                <TableCell className=\"relative\">\r\n                  <button\r\n                    onClick={() => setShowActionsFor(showActionsFor === report.id ? null : report.id)}\r\n                    className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\r\n                  >\r\n                    <MoreHorizontal className=\"cursor-pointer text-muted-foreground\" />\r\n                  </button>\r\n                  \r\n                  {/* Action Dropdown */}\r\n                  {showActionsFor === report.id && (\r\n                    <div className=\"absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-[160px]\">\r\n                      <div className=\"py-1\">\r\n                        {/* Mark as New - only show if not already new */}\r\n                        {report.incident_status !== \"new\" && (\r\n                          <button\r\n                            onClick={() => handleStatusUpdate(report.id, \"new\")}\r\n                            className=\"flex items-center gap-2 px-4 py-2 text-sm text-red-700 hover:bg-red-50 w-full text-left\"\r\n                          >\r\n                            Mark as New\r\n                          </button>\r\n                        )}\r\n                        \r\n                        {/* Mark as Resolved - only show if not already resolved */}\r\n                        {report.incident_status !== \"resolved\" && (\r\n                          <button\r\n                            onClick={() => handleStatusUpdate(report.id, \"resolved\")}\r\n                            className=\"flex items-center gap-2 px-4 py-2 text-sm text-green-700 hover:bg-green-50 w-full text-left\"\r\n                          >\r\n                            Mark as Resolved\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={6} className=\"text-center py-6\">\r\n                {selectedFilter === \"all\" \r\n                  ? \"No incident reports found.\" \r\n                  : `No ${selectedFilter.replace(/_/g, ' ')} incidents found.`}\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Click outside to close dropdown */}\r\n      {showActionsFor && (\r\n        <div \r\n          className=\"fixed inset-0 z-5\" \r\n          onClick={() => setShowActionsFor(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}"
        }
    ]
}