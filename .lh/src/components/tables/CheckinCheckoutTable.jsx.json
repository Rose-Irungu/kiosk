{
    "sourceFile": "src/components/tables/CheckinCheckoutTable.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753349165732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753349201263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \r\n   const fetchVisitors = async () => {\r\n     setLoading(true);\r\n     try {\r\n-      const data = await getVisitLogs();\r\n+      const data = await getVisiitLogs();\r\n       console.log(data)\r\n \r\n       let allData = data;\r\n \r\n"
                },
                {
                    "date": 1753349213972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from \"react\";\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableHead,\r\n+  TableHeader,\r\n+  TableRow,\r\n+} from \"@/components/ui/table\";\r\n+import { Upload, ChevronDown } from \"lucide-react\";\r\n+import { getVisitLogs } from \"@/services/checkincheckout\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+\r\n+\r\n+export default function CheckinCheckoutTable() {\r\n+  const [visitors, setVisitors] = useState([]);\r\n+  const [filteredAllVisitors, setFilteredAllVisitors] = useState([]);\r\n+  const [visitorTypeFilter, setVisitorTypeFilter] = useState(\"all\");\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const entriesPerPage = 6;\r\n+  const [totalEntries, setTotalEntries] = useState(0);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  useEffect(() => {\r\n+    console.log(\"am back\")\r\n+    fetchVisitors();\r\n+  }, [visitorTypeFilter, currentPage]);\r\n+\r\n+  const fetchVisitors = async () => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getVisitLLogs();\r\n+      console.log(data)\r\n+\r\n+      let allData = data;\r\n+\r\n+      if (visitorTypeFilter !== \"all\") {\r\n+        allData = allData.filter((v) => v.visitor_type === visitorTypeFilter);\r\n+      }\r\n+\r\n+      setFilteredAllVisitors(allData);\r\n+      setTotalEntries(allData.length);\r\n+\r\n+      const start = (currentPage - 1) * entriesPerPage;\r\n+      const paginated = allData.slice(start, start + entriesPerPage);\r\n+      setVisitors(paginated);\r\n+    } catch (error) {\r\n+      console.error(\"Error fetching visitors:\", error);\r\n+      setVisitors([]);\r\n+      setFilteredAllVisitors([]);\r\n+      setTotalEntries(0);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleFilterChange = (e) => {\r\n+    setVisitorTypeFilter(e.target.value);\r\n+    setCurrentPage(1);\r\n+  };\r\n+\r\n+  const handleView = (visitor) => {\r\n+    navigate(\"/view\", { state: { visitor } });\r\n+  };\r\n+\r\n+  const formatDate = (dateStr) => {\r\n+    if (!dateStr) return \"--\";\r\n+    const d = new Date(dateStr);\r\n+    return d.toLocaleString(\"en-KE\", {\r\n+      dateStyle: \"medium\",\r\n+      timeStyle: \"short\",\r\n+    });\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"p-6 space-y-6\">\r\n+      <div className=\"flex items-center justify-between\">\r\n+        <h2 className=\"text-lg font-semibold\">Live Logs</h2>\r\n+        <div className=\"flex items-center gap-2\">\r\n+          <select\r\n+            value={visitorTypeFilter}\r\n+            onChange={handleFilterChange}\r\n+            className=\"px-3 py-2 border rounded text-sm\"\r\n+          >\r\n+            <option value=\"all\">All</option>\r\n+            <option value=\"Returning\">Returning</option>\r\n+            <option value=\"New\">New</option>\r\n+          </select>\r\n+          <Button variant=\"outline\" size=\"sm\">\r\n+            <Upload className=\"w-4 h-4 mr-2\" />\r\n+            Export\r\n+            <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n+          </Button>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <div className=\"overflow-x-auto\">\r\n+        <Table>\r\n+          <TableHeader>\r\n+            <TableRow>\r\n+              <TableHead>Name</TableHead>\r\n+              <TableHead>Phone</TableHead>\r\n+              <TableHead>Unit</TableHead>\r\n+              <TableHead>Type</TableHead>\r\n+              <TableHead>Date</TableHead>\r\n+              <TableHead>Check-in</TableHead>\r\n+              <TableHead>Check-out</TableHead>\r\n+              <TableHead>Duration</TableHead>\r\n+              <TableHead>Car Plate</TableHead>\r\n+              <TableHead>Action</TableHead>\r\n+            </TableRow>\r\n+          </TableHeader>\r\n+          <TableBody>\r\n+            {loading ? (\r\n+              <TableRow>\r\n+                <TableCell colSpan={10}>Loading...</TableCell>\r\n+              </TableRow>\r\n+            ) : visitors.length > 0 ? (\r\n+              visitors.map((visitor, index) => (\r\n+                <TableRow key={index}>\r\n+                  <TableCell>{visitor.visitor_name}</TableCell>\r\n+                  <TableCell>{visitor.phone_number}</TableCell>\r\n+                  <TableCell>{visitor.unit_number}</TableCell>\r\n+                  <TableCell>{visitor.visitor_type}</TableCell>\r\n+                  <TableCell>{visitor.visit_date}</TableCell>\r\n+                  <TableCell>{formatDate(visitor.check_in_time)}</TableCell>\r\n+                  <TableCell>{formatDate(visitor.check_out_time)}</TableCell>\r\n+                  <TableCell>{visitor.duration}</TableCell>\r\n+                  <TableCell>{visitor.car_no_plate}</TableCell>\r\n+                  <TableCell>\r\n+                    <button\r\n+                      className=\"text-blue-600 hover:underline\"\r\n+                      onClick={() => handleView(visitor)}\r\n+                    >\r\n+                      View\r\n+                    </button>\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+              ))\r\n+            ) : (\r\n+              <TableRow>\r\n+                <TableCell colSpan={10}>No visitors found</TableCell>\r\n+              </TableRow>\r\n+            )}\r\n+          </TableBody>\r\n+        </Table>\r\n+      </div>\r\n+\r\n+      {/* Pagination */}\r\n+      <div className=\"flex justify-end mt-4 space-x-2\">\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n+          disabled={currentPage === 1}\r\n+        >\r\n+          Previous\r\n+        </Button>\r\n+        <span className=\"text-sm py-2 px-4\">Page {currentPage}</span>\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() =>\r\n+            setCurrentPage((prev) =>\r\n+              prev < Math.ceil(totalEntries / entriesPerPage)\r\n+                ? prev + 1\r\n+                : prev\r\n+            )\r\n+          }\r\n+          disabled={currentPage >= Math.ceil(totalEntries / entriesPerPage)}\r\n+        >\r\n+          Next\r\n+        </Button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1753349219389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n import { Upload, ChevronDown } from \"lucide-react\";\r\n import { getVisitLogs } from \"@/services/checkincheckout\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { useNavigate } from \"react-router-dom\";\r\n+// import { getVisitLogs } from \"ser\";\r\n \r\n-\r\n export default function CheckinCheckoutTable() {\r\n   const [visitors, setVisitors] = useState([]);\r\n   const [filteredAllVisitors, setFilteredAllVisitors] = useState([]);\r\n   const [visitorTypeFilter, setVisitorTypeFilter] = useState(\"all\");\r\n@@ -32,9 +32,9 @@\n \r\n   const fetchVisitors = async () => {\r\n     setLoading(true);\r\n     try {\r\n-      const data = await getVisitLLogs();\r\n+      const data = await getVisitLogs();\r\n       console.log(data)\r\n \r\n       let allData = data;\r\n \r\n@@ -178,185 +178,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from \"react\";\r\n-import {\r\n-  Table,\r\n-  TableBody,\r\n-  TableCell,\r\n-  TableHead,\r\n-  TableHeader,\r\n-  TableRow,\r\n-} from \"@/components/ui/table\";\r\n-import { Upload, ChevronDown } from \"lucide-react\";\r\n-import { getVisitLogs } from \"@/services/checkincheckout\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-\r\n-\r\n-export default function CheckinCheckoutTable() {\r\n-  const [visitors, setVisitors] = useState([]);\r\n-  const [filteredAllVisitors, setFilteredAllVisitors] = useState([]);\r\n-  const [visitorTypeFilter, setVisitorTypeFilter] = useState(\"all\");\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n-  const entriesPerPage = 6;\r\n-  const [totalEntries, setTotalEntries] = useState(0);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  useEffect(() => {\r\n-    console.log(\"am back\")\r\n-    fetchVisitors();\r\n-  }, [visitorTypeFilter, currentPage]);\r\n-\r\n-  const fetchVisitors = async () => {\r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getVisiitLogs();\r\n-      console.log(data)\r\n-\r\n-      let allData = data;\r\n-\r\n-      if (visitorTypeFilter !== \"all\") {\r\n-        allData = allData.filter((v) => v.visitor_type === visitorTypeFilter);\r\n-      }\r\n-\r\n-      setFilteredAllVisitors(allData);\r\n-      setTotalEntries(allData.length);\r\n-\r\n-      const start = (currentPage - 1) * entriesPerPage;\r\n-      const paginated = allData.slice(start, start + entriesPerPage);\r\n-      setVisitors(paginated);\r\n-    } catch (error) {\r\n-      console.error(\"Error fetching visitors:\", error);\r\n-      setVisitors([]);\r\n-      setFilteredAllVisitors([]);\r\n-      setTotalEntries(0);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleFilterChange = (e) => {\r\n-    setVisitorTypeFilter(e.target.value);\r\n-    setCurrentPage(1);\r\n-  };\r\n-\r\n-  const handleView = (visitor) => {\r\n-    navigate(\"/view\", { state: { visitor } });\r\n-  };\r\n-\r\n-  const formatDate = (dateStr) => {\r\n-    if (!dateStr) return \"--\";\r\n-    const d = new Date(dateStr);\r\n-    return d.toLocaleString(\"en-KE\", {\r\n-      dateStyle: \"medium\",\r\n-      timeStyle: \"short\",\r\n-    });\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"p-6 space-y-6\">\r\n-      <div className=\"flex items-center justify-between\">\r\n-        <h2 className=\"text-lg font-semibold\">Live Logs</h2>\r\n-        <div className=\"flex items-center gap-2\">\r\n-          <select\r\n-            value={visitorTypeFilter}\r\n-            onChange={handleFilterChange}\r\n-            className=\"px-3 py-2 border rounded text-sm\"\r\n-          >\r\n-            <option value=\"all\">All</option>\r\n-            <option value=\"Returning\">Returning</option>\r\n-            <option value=\"New\">New</option>\r\n-          </select>\r\n-          <Button variant=\"outline\" size=\"sm\">\r\n-            <Upload className=\"w-4 h-4 mr-2\" />\r\n-            Export\r\n-            <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n-          </Button>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"overflow-x-auto\">\r\n-        <Table>\r\n-          <TableHeader>\r\n-            <TableRow>\r\n-              <TableHead>Name</TableHead>\r\n-              <TableHead>Phone</TableHead>\r\n-              <TableHead>Unit</TableHead>\r\n-              <TableHead>Type</TableHead>\r\n-              <TableHead>Date</TableHead>\r\n-              <TableHead>Check-in</TableHead>\r\n-              <TableHead>Check-out</TableHead>\r\n-              <TableHead>Duration</TableHead>\r\n-              <TableHead>Car Plate</TableHead>\r\n-              <TableHead>Action</TableHead>\r\n-            </TableRow>\r\n-          </TableHeader>\r\n-          <TableBody>\r\n-            {loading ? (\r\n-              <TableRow>\r\n-                <TableCell colSpan={10}>Loading...</TableCell>\r\n-              </TableRow>\r\n-            ) : visitors.length > 0 ? (\r\n-              visitors.map((visitor, index) => (\r\n-                <TableRow key={index}>\r\n-                  <TableCell>{visitor.visitor_name}</TableCell>\r\n-                  <TableCell>{visitor.phone_number}</TableCell>\r\n-                  <TableCell>{visitor.unit_number}</TableCell>\r\n-                  <TableCell>{visitor.visitor_type}</TableCell>\r\n-                  <TableCell>{visitor.visit_date}</TableCell>\r\n-                  <TableCell>{formatDate(visitor.check_in_time)}</TableCell>\r\n-                  <TableCell>{formatDate(visitor.check_out_time)}</TableCell>\r\n-                  <TableCell>{visitor.duration}</TableCell>\r\n-                  <TableCell>{visitor.car_no_plate}</TableCell>\r\n-                  <TableCell>\r\n-                    <button\r\n-                      className=\"text-blue-600 hover:underline\"\r\n-                      onClick={() => handleView(visitor)}\r\n-                    >\r\n-                      View\r\n-                    </button>\r\n-                  </TableCell>\r\n-                </TableRow>\r\n-              ))\r\n-            ) : (\r\n-              <TableRow>\r\n-                <TableCell colSpan={10}>No visitors found</TableCell>\r\n-              </TableRow>\r\n-            )}\r\n-          </TableBody>\r\n-        </Table>\r\n-      </div>\r\n-\r\n-      {/* Pagination */}\r\n-      <div className=\"flex justify-end mt-4 space-x-2\">\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n-          disabled={currentPage === 1}\r\n-        >\r\n-          Previous\r\n-        </Button>\r\n-        <span className=\"text-sm py-2 px-4\">Page {currentPage}</span>\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() =>\r\n-            setCurrentPage((prev) =>\r\n-              prev < Math.ceil(totalEntries / entriesPerPage)\r\n-                ? prev + 1\r\n-                : prev\r\n-            )\r\n-          }\r\n-          disabled={currentPage >= Math.ceil(totalEntries / entriesPerPage)}\r\n-        >\r\n-          Next\r\n-        </Button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                }
            ],
            "date": 1753349165732,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Upload, ChevronDown } from \"lucide-react\";\r\nimport { getVisitLogs } from \"@/services/checkincheckout\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nexport default function CheckinCheckoutTable() {\r\n  const [visitors, setVisitors] = useState([]);\r\n  const [filteredAllVisitors, setFilteredAllVisitors] = useState([]);\r\n  const [visitorTypeFilter, setVisitorTypeFilter] = useState(\"all\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const entriesPerPage = 6;\r\n  const [totalEntries, setTotalEntries] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    console.log(\"am back\")\r\n    fetchVisitors();\r\n  }, [visitorTypeFilter, currentPage]);\r\n\r\n  const fetchVisitors = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getVisitLogs();\r\n      console.log(data)\r\n\r\n      let allData = data;\r\n\r\n      if (visitorTypeFilter !== \"all\") {\r\n        allData = allData.filter((v) => v.visitor_type === visitorTypeFilter);\r\n      }\r\n\r\n      setFilteredAllVisitors(allData);\r\n      setTotalEntries(allData.length);\r\n\r\n      const start = (currentPage - 1) * entriesPerPage;\r\n      const paginated = allData.slice(start, start + entriesPerPage);\r\n      setVisitors(paginated);\r\n    } catch (error) {\r\n      console.error(\"Error fetching visitors:\", error);\r\n      setVisitors([]);\r\n      setFilteredAllVisitors([]);\r\n      setTotalEntries(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = (e) => {\r\n    setVisitorTypeFilter(e.target.value);\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleView = (visitor) => {\r\n    navigate(\"/view\", { state: { visitor } });\r\n  };\r\n\r\n  const formatDate = (dateStr) => {\r\n    if (!dateStr) return \"--\";\r\n    const d = new Date(dateStr);\r\n    return d.toLocaleString(\"en-KE\", {\r\n      dateStyle: \"medium\",\r\n      timeStyle: \"short\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"text-lg font-semibold\">Live Logs</h2>\r\n        <div className=\"flex items-center gap-2\">\r\n          <select\r\n            value={visitorTypeFilter}\r\n            onChange={handleFilterChange}\r\n            className=\"px-3 py-2 border rounded text-sm\"\r\n          >\r\n            <option value=\"all\">All</option>\r\n            <option value=\"Returning\">Returning</option>\r\n            <option value=\"New\">New</option>\r\n          </select>\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Upload className=\"w-4 h-4 mr-2\" />\r\n            Export\r\n            <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"overflow-x-auto\">\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead>Name</TableHead>\r\n              <TableHead>Phone</TableHead>\r\n              <TableHead>Unit</TableHead>\r\n              <TableHead>Type</TableHead>\r\n              <TableHead>Date</TableHead>\r\n              <TableHead>Check-in</TableHead>\r\n              <TableHead>Check-out</TableHead>\r\n              <TableHead>Duration</TableHead>\r\n              <TableHead>Car Plate</TableHead>\r\n              <TableHead>Action</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {loading ? (\r\n              <TableRow>\r\n                <TableCell colSpan={10}>Loading...</TableCell>\r\n              </TableRow>\r\n            ) : visitors.length > 0 ? (\r\n              visitors.map((visitor, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>{visitor.visitor_name}</TableCell>\r\n                  <TableCell>{visitor.phone_number}</TableCell>\r\n                  <TableCell>{visitor.unit_number}</TableCell>\r\n                  <TableCell>{visitor.visitor_type}</TableCell>\r\n                  <TableCell>{visitor.visit_date}</TableCell>\r\n                  <TableCell>{formatDate(visitor.check_in_time)}</TableCell>\r\n                  <TableCell>{formatDate(visitor.check_out_time)}</TableCell>\r\n                  <TableCell>{visitor.duration}</TableCell>\r\n                  <TableCell>{visitor.car_no_plate}</TableCell>\r\n                  <TableCell>\r\n                    <button\r\n                      className=\"text-blue-600 hover:underline\"\r\n                      onClick={() => handleView(visitor)}\r\n                    >\r\n                      View\r\n                    </button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={10}>No visitors found</TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      <div className=\"flex justify-end mt-4 space-x-2\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n          disabled={currentPage === 1}\r\n        >\r\n          Previous\r\n        </Button>\r\n        <span className=\"text-sm py-2 px-4\">Page {currentPage}</span>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() =>\r\n            setCurrentPage((prev) =>\r\n              prev < Math.ceil(totalEntries / entriesPerPage)\r\n                ? prev + 1\r\n                : prev\r\n            )\r\n          }\r\n          disabled={currentPage >= Math.ceil(totalEntries / entriesPerPage)}\r\n        >\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}