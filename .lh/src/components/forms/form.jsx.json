{
    "sourceFile": "src/components/forms/form.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754642675626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754642680933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,549 @@\n+\"use client\";\r\n+\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { z } from \"zod\";\r\n+import { userService } from \"../../services/user\";\r\n+import { useForm } from \"react-hook-form\";\r\n+import { zodResolver } from \"@hookform/resolvers/zod\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import Layout from \"../../components/layout/Layout\";\r\n+\r\n+import {\r\n+  Form,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormControl,\r\n+  FormMessage,\r\n+} from \"@/components/forms/formid\";\r\n+\r\n+import { Input } from \"@/components/forms/input\";\r\n+import { Button } from \"@/components/forms/button\";\r\n+import {\r\n+  Select,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+} from \"@/components/forms/select\";\r\n+\r\n+import uploadIcon from \"@/assets/group01.svg\";\r\n+\r\n+const RequiredLabel = ({ children }) => (\r\n+  <FormLabel className=\"font-medium\">\r\n+    {children}\r\n+    <span className=\"text-red-500 ml-1\">*</span>\r\n+  </FormLabel>\r\n+);\r\n+\r\n+\r\n+const formSchema = z\r\n+  .object({\r\n+    role: z.string().min(1, { message: \"Please select a role.\" }),\r\n+    firstName: z.string().min(2, \"First name is required\"),\r\n+    lastName: z.string().min(2, \"Last name is required\"),\r\n+    email: z.string().email(\"Enter a valid email\"),\r\n+    phone: z.string().min(10, \"Enter a valid phone number\"),\r\n+    idNo: z.string().min(4, \"ID number is required\"),\r\n+    unit: z.string().min(1, \"Unit is required\"),\r\n+    password: z.string().optional(),\r\n+    confirmPassword: z.string().optional(),\r\n+    photo: z.any().optional(),\r\n+  })\r\n+  .refine((data) => data.password === data.confirmPassword, {\r\n+    path: [\"confirmPassword\"],\r\n+    message: \"Passwords do not match\",\r\n+  });\r\n+\r\n+export function UserForm({\r\n+  title = \"User Registration\",\r\n+  submitLabel = \"Submit\",\r\n+  setUsers,\r\n+}) {\r\n+  const navigate = useNavigate();\r\n+  const location = useLocation();\r\n+  const editUser = location.state?.user;\r\n+  const editMode = location.state?.editMode;\r\n+\r\n+  const [units, setUnits] = useState([]);\r\n+  const [showValidationError, setShowValidationError] = useState(false);\r\n+  const [preview, setPreview] = useState(null);\r\n+  const [serverMessage, setServerMessage] = useState(\"\"); \r\n+\r\n+  \r\n+  const form = useForm({\r\n+    resolver: zodResolver(formSchema),\r\n+    mode: \"onChange\",\r\n+    reValidateMode: \"onChange\",\r\n+    defaultValues: {\r\n+      role: editUser?.role || \"\",\r\n+      firstName: editUser?.first_name || \"\",\r\n+      lastName: editUser?.last_name || \"\",\r\n+      email: editUser?.email || \"\",\r\n+      phone: editUser?.phone_number || \"\",\r\n+      idNo: editUser?.id_number || \"\",\r\n+      unit: editUser?.unit_number?.toString() || \"\",\r\n+      password: \"\",\r\n+      confirmPassword: \"\",\r\n+      photo: null,\r\n+    },\r\n+  });\r\n+\r\n+  const {\r\n+    control,\r\n+    handleSubmit,\r\n+    reset,\r\n+    setError,\r\n+    trigger,\r\n+    setFocus,\r\n+    formState,\r\n+  } = form;\r\n+\r\n+  useEffect(() => {\r\n+    userService\r\n+      .getAllUnits()\r\n+      .then(setUnits)\r\n+      .catch((err) => console.error(\"Failed to fetch units:\", err));\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (editMode && editUser) {\r\n+      reset({\r\n+        role: editUser.role,\r\n+        firstName: editUser.first_name,\r\n+        lastName: editUser.last_name,\r\n+        email: editUser.email,\r\n+        phone: editUser.phone_number,\r\n+        idNo: editUser.id_number,\r\n+        unit: editUser.unit_number?.toString() || \"\",\r\n+        password: \"\",\r\n+        confirmPassword: \"\",\r\n+        photo: null,\r\n+      });\r\n+      setPreview(null);\r\n+    }\r\n+  }, [editMode, editUser, reset]);\r\n+\r\n+  useEffect(() => {\r\n+    if (Object.keys(formState.errors).length === 0) {\r\n+      setShowValidationError(false);\r\n+    }\r\n+  }, [formState.errors]);\r\n+\r\n+  \r\n+  const normalizeError = (err) => {\r\n+    if (err === null || typeof err === \"undefined\") return \"\";\r\n+    if (typeof err === \"string\") return err;\r\n+    if (typeof err === \"number\" || typeof err === \"boolean\") return String(err);\r\n+    if (Array.isArray(err)) return err.map(normalizeError).join(\", \");\r\n+    if (typeof err === \"object\") {\r\n+      return Object.values(err).map(normalizeError).join(\", \");\r\n+    }\r\n+    return String(err);\r\n+  };\r\n+\r\n+  \r\n+  const fieldMap = {\r\n+    first_name: \"firstName\",\r\n+    last_name: \"lastName\",\r\n+    email: \"email\",\r\n+    phone_number: \"phone\",\r\n+    id_number: \"idNo\",\r\n+    unit_number: \"unit\",\r\n+    role: \"role\",\r\n+    password: \"password\",\r\n+    confirm_password: \"confirmPassword\",\r\n+    profile_picture: \"photo\",\r\n+  };\r\n+\r\n+  \r\n+  const handleServerErrors = (errData) => {\r\n+    \r\n+    if (!errData) {\r\n+      setServerMessage(\"Unknown server error\");\r\n+      setShowValidationError(true);\r\n+      return;\r\n+    }\r\n+\r\n+    const payload = errData.errors ? errData.errors : errData;\r\n+\r\n+   \r\n+    if (typeof payload === \"object\" && !Array.isArray(payload)) {\r\n+      const keys = Object.keys(payload);\r\n+      const looksLikeFieldErrors = keys.some((k) => {\r\n+        return (\r\n+          Object.prototype.hasOwnProperty.call(fieldMap, k) ||\r\n+          \r\n+          [\"email\", \"firstName\", \"lastName\", \"phone\", \"idNo\", \"unit\", \"role\", \"photo\"].includes(k)\r\n+        );\r\n+      });\r\n+\r\n+      if (looksLikeFieldErrors) {\r\n+        \r\n+        setServerMessage(\"\");\r\n+\r\n+        keys.forEach((field) => {\r\n+          const mappedField = fieldMap[field] || field;\r\n+          const normalized = normalizeError(payload[field]);\r\n+\r\n+          \r\n+          try {\r\n+            setError(mappedField, {\r\n+              type: \"server\",\r\n+              message: normalized,\r\n+            });\r\n+          } catch (e) {\r\n+            \r\n+            setServerMessage((prev) =>\r\n+              prev ? `${prev}; ${mappedField}: ${normalized}` : `${mappedField}: ${normalized}`\r\n+            );\r\n+          }\r\n+        });\r\n+\r\n+        setShowValidationError(true);\r\n+        const firstField = keys[0];\r\n+        const mappedFirst = fieldMap[firstField] || firstField;\r\n+        \r\n+        try {\r\n+          setFocus(mappedFirst);\r\n+        } catch (e) {\r\n+        \r\n+        }\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    \r\n+    const generic = normalizeError(errData.detail ?? errData);\r\n+    setServerMessage(generic || \"An error occurred. Please try again.\");\r\n+    setShowValidationError(true);\r\n+  };\r\n+\r\n+  const onSubmit = async (values) => {\r\n+    setServerMessage(\"\");\r\n+    try {\r\n+      const formData = new FormData();\r\n+      formData.append(\"first_name\", values.firstName);\r\n+      formData.append(\"last_name\", values.lastName);\r\n+      formData.append(\"email\", values.email);\r\n+      formData.append(\"phone_number\", values.phone);\r\n+      formData.append(\"id_number\", values.idNo);\r\n+      formData.append(\"unit_number\", values.unit);\r\n+      formData.append(\"role\", values.role);\r\n+      if (values.password) formData.append(\"password\", values.password);\r\n+      if (values.photo) formData.append(\"profile_picture\", values.photo);\r\n+\r\n+      if (editMode) {\r\n+        await userService.updateUser(editUser.id, formData);\r\n+      } else {\r\n+        const addedUser = await userService.addUser(formData);\r\n+        if (setUsers) setUsers((prev) => [...prev, addedUser]);\r\n+      }\r\n+\r\n+     \r\n+      reset();\r\n+      setPreview(null);\r\n+      navigate(\"/userspage\");\r\n+    } catch (error) {\r\n+      \r\n+      console.error(\"Error submitting user:\", error);\r\n+\r\n+      \r\n+      const respData = error?.response?.data;\r\n+      if (respData) {\r\n+        handleServerErrors(respData);\r\n+      } else {\r\n+       \r\n+        setServerMessage(error?.message ?? \"Failed to submit user. Please try again.\");\r\n+        setShowValidationError(true);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+ \r\n+  const showFieldError = (name) => {\r\n+    return (\r\n+      !!formState.errors[name] &&\r\n+      (showValidationError || formState.touchedFields[name] || formState.isSubmitted)\r\n+    );\r\n+  };\r\n+\r\n+  \r\n+  const renderServerMessage = () => {\r\n+    if (!serverMessage) return null;\r\n+   \r\n+    return (\r\n+      <div className=\"bg-red-50 text-red-700 border border-red-200 px-3 py-2 rounded text-sm\">\r\n+        {serverMessage}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen bg-[#EEEAFD]\">\r\n+      <Layout>\r\n+        <div className=\"p-4 md:p-6 flex justify-center\">\r\n+          <div className=\"bg-white rounded-xl p-6 sm:p-8 shadow-lg w-full max-w-4xl\">\r\n+            <h2 className=\"text-xl font-semibold mb-6 text-gray-800\">\r\n+              {editMode ? \"Edit User\" : title}\r\n+            </h2>\r\n+\r\n+            <Form {...form}>\r\n+              <form\r\n+                noValidate\r\n+                onSubmit={handleSubmit(onSubmit, (errors) => {\r\n+                  setShowValidationError(true);\r\n+                  trigger();\r\n+                  const first = Object.keys(errors)[0];\r\n+                  if (first) setFocus(first);\r\n+                })}\r\n+                className=\"space-y-6\"\r\n+              >\r\n+                {showValidationError && (\r\n+                  <div className=\"bg-red-100 text-red-800 border border-red-400 px-4 py-3 rounded-md text-sm\">\r\n+                    Please fix the errors in the form before submitting.\r\n+                  </div>\r\n+                )}\r\n+\r\n+               \r\n+                {renderServerMessage()}\r\n+\r\n+                <FormField\r\n+                  control={control}\r\n+                  name=\"role\"\r\n+                  render={({ field }) => {\r\n+                    const errorMsg = normalizeError(formState.errors.role?.message);\r\n+                    return (\r\n+                      <FormItem>\r\n+                        <RequiredLabel>Role</RequiredLabel>\r\n+                        <Select\r\n+                          onValueChange={field.onChange}\r\n+                          value={field.value}\r\n+                          onBlur={field.onBlur}\r\n+                        >\r\n+                          <FormControl>\r\n+                            <SelectTrigger\r\n+                              className={`bg-[#f4eaff] ${showFieldError(\"role\") ? \"border border-red-500\" : \"\"}`}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select a role\" />\r\n+                            </SelectTrigger>\r\n+                          </FormControl>\r\n+                          <SelectContent>\r\n+                            <SelectItem value=\"tenant\">Resident</SelectItem>\r\n+                            <SelectItem value=\"security\">Security</SelectItem>\r\n+                            <SelectItem value=\"admin\">Admin</SelectItem>\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {showFieldError(\"role\") && (\r\n+                          <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                        )}\r\n+                        <FormMessage />\r\n+                      </FormItem>\r\n+                    );\r\n+                  }}\r\n+                />\r\n+\r\n+                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\r\n+                  {[\r\n+                    [\"firstName\", \"First Name\"],\r\n+                    [\"lastName\", \"Last Name\"],\r\n+                    [\"email\", \"Email\"],\r\n+                  ].map(([name, label]) => (\r\n+                    <FormField\r\n+                      key={name}\r\n+                      control={control}\r\n+                      name={name}\r\n+                      render={({ field }) => {\r\n+                        const errorMsg = normalizeError(formState.errors[name]?.message);\r\n+                        return (\r\n+                          <FormItem>\r\n+                            <RequiredLabel>{label}</RequiredLabel>\r\n+                            <FormControl>\r\n+                              <Input\r\n+                                className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n+                                placeholder={`Enter ${label}`}\r\n+                                {...field}\r\n+                              />\r\n+                            </FormControl>\r\n+                            {showFieldError(name) && (\r\n+                              <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                            )}\r\n+                            <FormMessage />\r\n+                          </FormItem>\r\n+                        );\r\n+                      }}\r\n+                    />\r\n+                  ))}\r\n+                </div>\r\n+\r\n+               \r\n+                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\r\n+                  {[\r\n+                    [\"phone\", \"Phone No.\"],\r\n+                    [\"idNo\", \"ID No.\"],\r\n+                  ].map(([name, label]) => (\r\n+                    <FormField\r\n+                      key={name}\r\n+                      control={control}\r\n+                      name={name}\r\n+                      render={({ field }) => {\r\n+                        const errorMsg = normalizeError(formState.errors[name]?.message);\r\n+                        return (\r\n+                          <FormItem>\r\n+                            <RequiredLabel>{label}</RequiredLabel>\r\n+                            <FormControl>\r\n+                              <Input\r\n+                                className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n+                                placeholder={`Enter ${label}`}\r\n+                                {...field}\r\n+                              />\r\n+                            </FormControl>\r\n+                            {showFieldError(name) && (\r\n+                              <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                            )}\r\n+                            <FormMessage />\r\n+                          </FormItem>\r\n+                        );\r\n+                      }}\r\n+                    />\r\n+                  ))}\r\n+                  <FormField\r\n+                    control={control}\r\n+                    name=\"unit\"\r\n+                    render={({ field }) => {\r\n+                      const errorMsg = normalizeError(formState.errors.unit?.message);\r\n+                      return (\r\n+                        <FormItem>\r\n+                          <RequiredLabel>Unit</RequiredLabel>\r\n+                          <Select\r\n+                            onValueChange={field.onChange}\r\n+                            value={field.value}\r\n+                            onBlur={field.onBlur}\r\n+                          >\r\n+                            <FormControl>\r\n+                              <SelectTrigger\r\n+                                className={`bg-[#f4eaff] ${showFieldError(\"unit\") ? \"border border-red-500\" : \"\"}`}\r\n+                              >\r\n+                                <SelectValue placeholder=\"Select a unit\" />\r\n+                              </SelectTrigger>\r\n+                            </FormControl>\r\n+                            <SelectContent>\r\n+                              {units.map((unit) => (\r\n+                                <SelectItem key={unit.id} value={String(unit.id)}>\r\n+                                  {unit.unit_name}\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                          {showFieldError(\"unit\") && (\r\n+                            <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                          )}\r\n+                          <FormMessage />\r\n+                        </FormItem>\r\n+                      );\r\n+                    }}\r\n+                  />\r\n+                </div>\r\n+\r\n+                {!editMode && (\r\n+                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n+                    {[\r\n+                      [\"password\", \"Password\"],\r\n+                      [\"confirmPassword\", \"Confirm Password\"],\r\n+                    ].map(([name, label]) => (\r\n+                      <FormField\r\n+                        key={name}\r\n+                        control={control}\r\n+                        name={name}\r\n+                        render={({ field }) => {\r\n+                          const errorMsg = normalizeError(formState.errors[name]?.message);\r\n+                          return (\r\n+                            <FormItem>\r\n+                              <RequiredLabel>{label}</RequiredLabel>\r\n+                              <FormControl>\r\n+                                <Input\r\n+                                  type=\"password\"\r\n+                                  className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n+                                  placeholder={`Enter ${label}`}\r\n+                                  {...field}\r\n+                                />\r\n+                              </FormControl>\r\n+                              {showFieldError(name) && (\r\n+                                <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                              )}\r\n+                              <FormMessage />\r\n+                            </FormItem>\r\n+                          );\r\n+                        }}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                )}\r\n+\r\n+               \r\n+                <FormField\r\n+                  control={control}\r\n+                  name=\"photo\"\r\n+                  render={({ field: { onChange } }) => {\r\n+                    const errorMsg = normalizeError(formState.errors.photo?.message);\r\n+                    return (\r\n+                      <FormItem>\r\n+                        <FormLabel className=\"font-medium\">Photo</FormLabel>\r\n+                        <FormControl>\r\n+                          <div className=\"bg-[#f4eaff] h-28 rounded-md border border-dashed flex items-center justify-center text-sm text-gray-500 relative overflow-hidden\">\r\n+                            <input\r\n+                              type=\"file\"\r\n+                              onChange={(e) => {\r\n+                                const file = e.target.files?.[0];\r\n+                                if (file) {\r\n+                                  setPreview(URL.createObjectURL(file));\r\n+                                  onChange(file);\r\n+                                }\r\n+                              }}\r\n+                              accept=\"image/*\"\r\n+                              className=\"opacity-0 absolute w-full h-full cursor-pointer\"\r\n+                            />\r\n+                            {preview ? (\r\n+                              <img\r\n+                                src={preview}\r\n+                                alt=\"Preview\"\r\n+                                className=\"absolute inset-0 w-full h-full object-cover\"\r\n+                              />\r\n+                            ) : (\r\n+                              <div className=\"flex flex-col items-center gap-2\">\r\n+                                <div className=\"bg-[#085ca10d] rounded-full p-2 w-12 h-12 flex items-center justify-center\">\r\n+                                  <img src={uploadIcon} alt=\"Upload\" className=\"w-6 h-6\" />\r\n+                                </div>\r\n+                                <span className=\"text-sm text-gray-500 text-center\">\r\n+                                  Upload a User’s Photo\r\n+                                </span>\r\n+                              </div>\r\n+                            )}\r\n+                          </div>\r\n+                        </FormControl>\r\n+                        {showFieldError(\"photo\") && (\r\n+                          <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                        )}\r\n+                        <FormMessage />\r\n+                      </FormItem>\r\n+                    );\r\n+                  }}\r\n+                />\r\n+\r\n+                <Button\r\n+                  type=\"submit\"\r\n+                  className=\"w-full bg-[#005E0E] hover:bg-gradient-to-r hover:from-indigo-500 hover:to-[#01450b] text-white font-semibold py-2 rounded-md shadow-md transition-all duration-300\"\r\n+                >\r\n+                  {editMode ? \"Update\" : submitLabel}\r\n+                </Button>\r\n+              </form>\r\n+            </Form>\r\n+          </div>\r\n+        </div>\r\n+      </Layout>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default UserForm;\r\n+export const UserFormSchema = formSchema;\r\n"
                },
                {
                    "date": 1754642690502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,549 @@\n+\"use client\";\r\n+\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { z } from \"zod\";\r\n+import { userService } from \"../../services/user\";\r\n+import { useForm } from \"react-hook-form\";\r\n+import { zodResolver } from \"@hookform/resolvers/zod\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import Layout from \"../../components/layout/Layout\";\r\n+\r\n+import {\r\n+  Form,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormControl,\r\n+  FormMessage,\r\n+} from \"@/components/forms/formid\";\r\n+\r\n+import { Input } from \"@/components/forms/input\";\r\n+import { Button } from \"@/components/forms/button\";\r\n+import {\r\n+  Select,\r\n+  SelectTrigger,\r\n+  SelectValue,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+} from \"@/components/forms/select\";\r\n+\r\n+import uploadIcon from \"@/assets/group01.svg\";\r\n+\r\n+const RequiredLabel = ({ children }) => (\r\n+  <FormLabel className=\"font-medium\">\r\n+    {children}\r\n+    <span className=\"text-red-500 ml-1\">*</span>\r\n+  </FormLabel>\r\n+);\r\n+\r\n+\r\n+const formSchema = z\r\n+  .object({\r\n+    role: z.string().min(1, { message: \"Please select a role.\" }),\r\n+    firstName: z.string().min(2, \"First name is required\"),\r\n+    lastName: z.string().min(2, \"Last name is required\"),\r\n+    email: z.string().email(\"Enter a valid email\"),\r\n+    phone: z.string().min(10, \"Enter a valid phone number\"),\r\n+    idNo: z.string().min(4, \"ID number is required\"),\r\n+    unit: z.string().min(1, \"Unit is required\"),\r\n+    password: z.string().optional(),\r\n+    confirmPassword: z.string().optional(),\r\n+    photo: z.any().optional(),\r\n+  })\r\n+  .refine((data) => data.password === data.confirmPassword, {\r\n+    path: [\"confirmPassword\"],\r\n+    message: \"Passwords do not match\",\r\n+  });\r\n+\r\n+export function UserForm({\r\n+  title = \"User Registration\",\r\n+  submitLabel = \"Submit\",\r\n+  setUsers,\r\n+}) {\r\n+  const navigate = useNavigate();\r\n+  const location = useLocation();\r\n+  const editUser = location.state?.user;\r\n+  const editMode = location.state?.editMode;\r\n+\r\n+  const [units, setUnits] = useState([]);\r\n+  const [showValidationError, setShowValidationError] = useState(false);\r\n+  const [preview, setPreview] = useState(null);\r\n+  const [serverMessage, setServerMessage] = useState(\"\"); \r\n+\r\n+  \r\n+  const form = useForm({\r\n+    resolver: zodResolver(formSchema),\r\n+    mode: \"onChange\",\r\n+    reValidateMode: \"onChange\",\r\n+    defaultValues: {\r\n+      role: editUser?.role || \"\",\r\n+      firstName: editUser?.first_name || \"\",\r\n+      lastName: editUser?.last_name || \"\",\r\n+      email: editUser?.email || \"\",\r\n+      phone: editUser?.phone_number || \"\",\r\n+      idNo: editUser?.id_number || \"\",\r\n+      unit: editUser?.unit_number?.toString() || \"\",\r\n+      password: \"\",\r\n+      confirmPassword: \"\",\r\n+      photo: null,\r\n+    },\r\n+  });\r\n+\r\n+  const {\r\n+    control,\r\n+    handleSubmit,\r\n+    reset,\r\n+    setError,\r\n+    trigger,\r\n+    setFocus,\r\n+    formState,\r\n+  } = form;\r\n+\r\n+  useEffect(() => {\r\n+    userService\r\n+      .getAllUnits()\r\n+      .then(setUnits)\r\n+      .catch((err) => console.error(\"Failed to fetch units:\", err));\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (editMode && editUser) {\r\n+      reset({\r\n+        role: editUser.role,\r\n+        firstName: editUser.first_name,\r\n+        lastName: editUser.last_name,\r\n+        email: editUser.email,\r\n+        phone: editUser.phone_number,\r\n+        idNo: editUser.id_number,\r\n+        unit: editUser.unit_number?.toString() || \"\",\r\n+        password: \"\",\r\n+        confirmPassword: \"\",\r\n+        photo: null,\r\n+      });\r\n+      setPreview(null);\r\n+    }\r\n+  }, [editMode, editUser, reset]);\r\n+\r\n+  useEffect(() => {\r\n+    if (Object.keys(formState.errors).length === 0) {\r\n+      setShowValidationError(false);\r\n+    }\r\n+  }, [formState.errors]);\r\n+\r\n+  \r\n+  const normalizeError = (err) => {\r\n+    if (err === null || typeof err === \"undefined\") return \"\";\r\n+    if (typeof err === \"string\") return err;\r\n+    if (typeof err === \"number\" || typeof err === \"boolean\") return String(err);\r\n+    if (Array.isArray(err)) return err.map(normalizeError).join(\", \");\r\n+    if (typeof err === \"object\") {\r\n+      return Object.values(err).map(normalizeError).join(\", \");\r\n+    }\r\n+    return String(err);\r\n+  };\r\n+\r\n+  \r\n+  const fieldMap = {\r\n+    first_name: \"firstName\",\r\n+    last_name: \"lastName\",\r\n+    email: \"email\",\r\n+    phone_number: \"phone\",\r\n+    id_number: \"idNo\",\r\n+    unit_number: \"unit\",\r\n+    role: \"role\",\r\n+    password: \"password\",\r\n+    confirm_password: \"confirmPassword\",\r\n+    profile_picture: \"photo\",\r\n+  };\r\n+\r\n+  \r\n+  const handleServerErrors = (errData) => {\r\n+    \r\n+    if (!errData) {\r\n+      setServerMessage(\"Unknown server error\");\r\n+      setShowValidationError(true);\r\n+      return;\r\n+    }\r\n+\r\n+    const payload = errData.errors ? errData.errors : errData;\r\n+\r\n+   \r\n+    if (typeof payload === \"object\" && !Array.isArray(payload)) {\r\n+      const keys = Object.keys(payload);\r\n+      const looksLikeFieldErrors = keys.some((k) => {\r\n+        return (\r\n+          Object.prototype.hasOwnProperty.call(fieldMap, k) ||\r\n+          \r\n+          [\"email\", \"firstName\", \"lastName\", \"phone\", \"idNo\", \"unit\", \"role\", \"photo\"].includes(k)\r\n+        );\r\n+      });\r\n+\r\n+      if (looksLikeFieldErrors) {\r\n+        \r\n+        setServerMessage(\"\");\r\n+\r\n+        keys.forEach((field) => {\r\n+          const mappedField = fieldMap[field] || field;\r\n+          const normalized = normalizeError(payload[field]);\r\n+\r\n+          \r\n+          try {\r\n+            setError(mappedField, {\r\n+              type: \"server\",\r\n+              message: normalized,\r\n+            });\r\n+          } catch (e) {\r\n+            \r\n+            setServerMessage((prev) =>\r\n+              prev ? `${prev}; ${mappedField}: ${normalized}` : `${mappedField}: ${normalized}`\r\n+            );\r\n+          }\r\n+        });\r\n+\r\n+        setShowValidationError(true);\r\n+        const firstField = keys[0];\r\n+        const mappedFirst = fieldMap[firstField] || firstField;\r\n+        \r\n+        try {\r\n+          setFocus(mappedFirst);\r\n+        } catch (e) {\r\n+        \r\n+        }\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    \r\n+    const generic = normalizeError(errData.detail ?? errData);\r\n+    setServerMessage(generic || \"An error occurred. Please try again.\");\r\n+    setShowValidationError(true);\r\n+  };\r\n+\r\n+  const onSubmit = async (values) => {\r\n+    setServerMessage(\"\");\r\n+    try {\r\n+      const formData = new FormData();\r\n+      formData.append(\"first_name\", values.firstName);\r\n+      formData.append(\"last_name\", values.lastName);\r\n+      formData.append(\"email\", values.email);\r\n+      formData.append(\"phone_number\", values.phone);\r\n+      formData.append(\"id_number\", values.idNo);\r\n+      formData.append(\"unit_number\", values.unit);\r\n+      formData.append(\"role\", values.role);\r\n+      if (values.password) formData.append(\"password\", values.password);\r\n+      if (values.photo) formData.append(\"profile_picture\", values.photo);\r\n+\r\n+      if (editMode) {\r\n+        await userService.updateUser(editUser.id, formData);\r\n+      } else {\r\n+        const addedUser = await userService.addUser(formData);\r\n+        if (setUsers) setUsers((prev) => [...prev, addedUser]);\r\n+      }\r\n+\r\n+     \r\n+      reset();\r\n+      setPreview(null);\r\n+      navigate(\"/userspage\");\r\n+    } catch (error) {\r\n+      \r\n+      console.error(\"Error submitting user:\", error);\r\n+\r\n+      \r\n+      const respData = error?.response?.data;\r\n+      if (respData) {\r\n+        handleServerErrors(respData);\r\n+      } else {\r\n+       \r\n+        setServerMessage(error?.message ?? \"Failed to submit user. Please try again.\");\r\n+        setShowValidationError(true);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+ \r\n+  const showFieldError = (name) => {\r\n+    return (\r\n+      !!formState.errors[name] &&\r\n+      (showValidationError || formState.touchedFields[name] || formState.isSubmitted)\r\n+    );\r\n+  };\r\n+\r\n+  \r\n+  const renderServerMessage = () => {\r\n+    if (!serverMessage) return null;\r\n+   \r\n+    return (\r\n+      <div className=\"bg-red-50 text-red-700 border border-red-200 px-3 py-2 rounded text-sm\">\r\n+        {serverMessage}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen bg-[#EEEAFD]\">\r\n+      <Layout>\r\n+        <div className=\"p-4 md:p-6 flex justify-center\">\r\n+          <div className=\"bg-white rounded-xl p-6 sm:p-8 shadow-lg w-full max-w-4xl\">\r\n+            <h2 className=\"text-xl font-semibold mb-6 text-gray-800\">\r\n+              {editMode ? \"Edit User\" : title}\r\n+            </h2>\r\n+\r\n+            <Form {...form}>\r\n+              <form\r\n+                noValidate\r\n+                onSubmit={handleSubmit(onSubmit, (errors) => {\r\n+                  setShowValidationError(true);\r\n+                  trigger();\r\n+                  const first = Object.keys(errors)[0];\r\n+                  if (first) setFocus(first);\r\n+                })}\r\n+                className=\"space-y-6\"\r\n+              >\r\n+                {showValidationError && (\r\n+                  <div className=\"bg-red-100 text-red-800 border border-red-400 px-4 py-3 rounded-md text-sm\">\r\n+                    Please fix the errors in the form before submitting.\r\n+                  </div>\r\n+                )}\r\n+\r\n+               \r\n+                {renderServerMessage()}\r\n+\r\n+                <FormField\r\n+                  control={control}\r\n+                  name=\"role\"\r\n+                  render={({ field }) => {\r\n+                    const errorMsg = normalizeError(formState.errors.role?.message);\r\n+                    return (\r\n+                      <FormItem>\r\n+                        <RequiredLabel>Role</RequiredLabel>\r\n+                        <Select\r\n+                          onValueChange={field.onChange}\r\n+                          value={field.value}\r\n+                          onBlur={field.onBlur}\r\n+                        >\r\n+                          <FormControl>\r\n+                            <SelectTrigger\r\n+                              className={`bg-[#f4eaff] ${showFieldError(\"role\") ? \"border border-red-500\" : \"\"}`}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select a role\" />\r\n+                            </SelectTrigger>\r\n+                          </FormControl>\r\n+                          <SelectContent>\r\n+                            <SelectItem value=\"tenant\">Resident</SelectItem>\r\n+                            <SelectItem value=\"security\">Security</SelectItem>\r\n+                            <SelectItem value=\"admin\">Admin</SelectItem>\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {showFieldError(\"role\") && (\r\n+                          <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                        )}\r\n+                        <FormMessage />\r\n+                      </FormItem>\r\n+                    );\r\n+                  }}\r\n+                />\r\n+\r\n+                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\r\n+                  {[\r\n+                    [\"firstName\", \"First Name\"],\r\n+                    [\"lastName\", \"Last Name\"],\r\n+                    [\"email\", \"Email\"],\r\n+                  ].map(([name, label]) => (\r\n+                    <FormField\r\n+                      key={name}\r\n+                      control={control}\r\n+                      name={name}\r\n+                      render={({ field }) => {\r\n+                        const errorMsg = normalizeError(formState.errors[name]?.message);\r\n+                        return (\r\n+                          <FormItem>\r\n+                            <RequiredLabel>{label}</RequiredLabel>\r\n+                            <FormControl>\r\n+                              <Input\r\n+                                className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n+                                placeholder={`Enter ${label}`}\r\n+                                {...field}\r\n+                              />\r\n+                            </FormControl>\r\n+                            {showFieldError(name) && (\r\n+                              <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                            )}\r\n+                            <FormMessage />\r\n+                          </FormItem>\r\n+                        );\r\n+                      }}\r\n+                    />\r\n+                  ))}\r\n+                </div>\r\n+\r\n+               \r\n+                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\r\n+                  {[\r\n+                    [\"phone\", \"Phone No.\"],\r\n+                    [\"idNo\", \"ID No.\"],\r\n+                  ].map(([name, label]) => (\r\n+                    <FormField\r\n+                      key={name}\r\n+                      control={control}\r\n+                      name={name}\r\n+                      render={({ field }) => {\r\n+                        const errorMsg = normalizeError(formState.errors[name]?.message);\r\n+                        return (\r\n+                          <FormItem>\r\n+                            <RequiredLabel>{label}</RequiredLabel>\r\n+                            <FormControl>\r\n+                              <Input\r\n+                                className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n+                                placeholder={`Enter ${label}`}\r\n+                                {...field}\r\n+                              />\r\n+                            </FormControl>\r\n+                            {showFieldError(name) && (\r\n+                              <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                            )}\r\n+                            <FormMessage />\r\n+                          </FormItem>\r\n+                        );\r\n+                      }}\r\n+                    />\r\n+                  ))}\r\n+                  <FormField\r\n+                    control={control}\r\n+                    name=\"unit\"\r\n+                    render={({ field }) => {\r\n+                      const errorMsg = normalizeError(formState.errors.unit?.message);\r\n+                      return (\r\n+                        <FormItem>\r\n+                          <RequiredLabel>Unit</RequiredLabel>\r\n+                          <Select\r\n+                            onValueChange={field.onChange}\r\n+                            value={field.value}\r\n+                            onBlur={field.onBlur}\r\n+                          >\r\n+                            <FormControl>\r\n+                              <SelectTrigger\r\n+                                className={`bg-[#f4eaff] ${showFieldError(\"unit\") ? \"border border-red-500\" : \"\"}`}\r\n+                              >\r\n+                                <SelectValue placeholder=\"Select a unit\" />\r\n+                              </SelectTrigger>\r\n+                            </FormControl>\r\n+                            <SelectContent>\r\n+                              {units.map((unit) => (\r\n+                                <SelectItem key={unit.id} value={String(unit.id)}>\r\n+                                  {unit.unit_name}\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                          {showFieldError(\"unit\") && (\r\n+                            <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                          )}\r\n+                          <FormMessage />\r\n+                        </FormItem>\r\n+                      );\r\n+                    }}\r\n+                  />\r\n+                </div>\r\n+\r\n+                {!editMode && (\r\n+                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n+                    {[\r\n+                      [\"password\", \"Password\"],\r\n+                      [\"confirmPassword\", \"Confirm Password\"],\r\n+                    ].map(([name, label]) => (\r\n+                      <FormField\r\n+                        key={name}\r\n+                        control={control}\r\n+                        name={name}\r\n+                        render={({ field }) => {\r\n+                          const errorMsg = normalizeError(formState.errors[name]?.message);\r\n+                          return (\r\n+                            <FormItem>\r\n+                              <RequiredLabel>{label}</RequiredLabel>\r\n+                              <FormControl>\r\n+                                <Input\r\n+                                  type=\"password\"\r\n+                                  className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n+                                  placeholder={`Enter ${label}`}\r\n+                                  {...field}\r\n+                                />\r\n+                              </FormControl>\r\n+                              {showFieldError(name) && (\r\n+                                <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                              )}\r\n+                              <FormMessage />\r\n+                            </FormItem>\r\n+                          );\r\n+                        }}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                )}\r\n+\r\n+               \r\n+                <FormField\r\n+                  control={control}\r\n+                  name=\"photo\"\r\n+                  render={({ field: { onChange } }) => {\r\n+                    const errorMsg = normalizeError(formState.errors.photo?.message);\r\n+                    return (\r\n+                      <FormItem>\r\n+                        <FormLabel className=\"font-medium\">Photo</FormLabel>\r\n+                        <FormControl>\r\n+                          <div className=\"bg-[#f4eaff] h-28 rounded-md border border-dashed flex items-center justify-center text-sm text-gray-500 relative overflow-hidden\">\r\n+                            <input\r\n+                              type=\"file\"\r\n+                              onChange={(e) => {\r\n+                                const file = e.target.files?.[0];\r\n+                                if (file) {\r\n+                                  setPreview(URL.createObjectURL(file));\r\n+                                  onChange(file);\r\n+                                }\r\n+                              }}\r\n+                              accept=\"image/*\"\r\n+                              className=\"opacity-0 absolute w-full h-full cursor-pointer\"\r\n+                            />\r\n+                            {preview ? (\r\n+                              <img\r\n+                                src={preview}\r\n+                                alt=\"Preview\"\r\n+                                className=\"absolute inset-0 w-full h-full object-cover\"\r\n+                              />\r\n+                            ) : (\r\n+                              <div className=\"flex flex-col items-center gap-2\">\r\n+                                <div className=\"bg-[#085ca10d] rounded-full p-2 w-12 h-12 flex items-center justify-center\">\r\n+                                  <img src={uploadIcon} alt=\"Upload\" className=\"w-6 h-6\" />\r\n+                                </div>\r\n+                                <span className=\"text-sm text-gray-500 text-center\">\r\n+                                  Upload a User’s Photo\r\n+                                </span>\r\n+                              </div>\r\n+                            )}\r\n+                          </div>\r\n+                        </FormControl>\r\n+                        {showFieldError(\"photo\") && (\r\n+                          <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n+                        )}\r\n+                        <FormMessage />\r\n+                      </FormItem>\r\n+                    );\r\n+                  }}\r\n+                />\r\n+\r\n+                <Button\r\n+                  type=\"submit\"\r\n+                  className=\"w-full bg-[#005E0E] hover:bg-gradient-to-r hover:from-[] hover:to-[#01450b] text-white font-semibold py-2 rounded-md shadow-md transition-all duration-300\"\r\n+                >\r\n+                  {editMode ? \"Update\" : submitLabel}\r\n+                </Button>\r\n+              </form>\r\n+            </Form>\r\n+          </div>\r\n+        </div>\r\n+      </Layout>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default UserForm;\r\n+export const UserFormSchema = formSchema;\r\n"
                }
            ],
            "date": 1754642675626,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { z } from \"zod\";\r\nimport { userService } from \"../../services/user\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Layout from \"../../components/layout/Layout\";\r\n\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormMessage,\r\n} from \"@/components/forms/formid\";\r\n\r\nimport { Input } from \"@/components/forms/input\";\r\nimport { Button } from \"@/components/forms/button\";\r\nimport {\r\n  Select,\r\n  SelectTrigger,\r\n  SelectValue,\r\n  SelectContent,\r\n  SelectItem,\r\n} from \"@/components/forms/select\";\r\n\r\nimport uploadIcon from \"@/assets/group01.svg\";\r\n\r\nconst RequiredLabel = ({ children }) => (\r\n  <FormLabel className=\"font-medium\">\r\n    {children}\r\n    <span className=\"text-red-500 ml-1\">*</span>\r\n  </FormLabel>\r\n);\r\n\r\n\r\nconst formSchema = z\r\n  .object({\r\n    role: z.string().min(1, { message: \"Please select a role.\" }),\r\n    firstName: z.string().min(2, \"First name is required\"),\r\n    lastName: z.string().min(2, \"Last name is required\"),\r\n    email: z.string().email(\"Enter a valid email\"),\r\n    phone: z.string().min(10, \"Enter a valid phone number\"),\r\n    idNo: z.string().min(4, \"ID number is required\"),\r\n    unit: z.string().min(1, \"Unit is required\"),\r\n    password: z.string().optional(),\r\n    confirmPassword: z.string().optional(),\r\n    photo: z.any().optional(),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    path: [\"confirmPassword\"],\r\n    message: \"Passwords do not match\",\r\n  });\r\n\r\nexport function UserForm({\r\n  title = \"User Registration\",\r\n  submitLabel = \"Submit\",\r\n  setUsers,\r\n}) {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const editUser = location.state?.user;\r\n  const editMode = location.state?.editMode;\r\n\r\n  const [units, setUnits] = useState([]);\r\n  const [showValidationError, setShowValidationError] = useState(false);\r\n  const [preview, setPreview] = useState(null);\r\n  const [serverMessage, setServerMessage] = useState(\"\"); \r\n\r\n  \r\n  const form = useForm({\r\n    resolver: zodResolver(formSchema),\r\n    mode: \"onChange\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {\r\n      role: editUser?.role || \"\",\r\n      firstName: editUser?.first_name || \"\",\r\n      lastName: editUser?.last_name || \"\",\r\n      email: editUser?.email || \"\",\r\n      phone: editUser?.phone_number || \"\",\r\n      idNo: editUser?.id_number || \"\",\r\n      unit: editUser?.unit_number?.toString() || \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      photo: null,\r\n    },\r\n  });\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    setError,\r\n    trigger,\r\n    setFocus,\r\n    formState,\r\n  } = form;\r\n\r\n  useEffect(() => {\r\n    userService\r\n      .getAllUnits()\r\n      .then(setUnits)\r\n      .catch((err) => console.error(\"Failed to fetch units:\", err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (editMode && editUser) {\r\n      reset({\r\n        role: editUser.role,\r\n        firstName: editUser.first_name,\r\n        lastName: editUser.last_name,\r\n        email: editUser.email,\r\n        phone: editUser.phone_number,\r\n        idNo: editUser.id_number,\r\n        unit: editUser.unit_number?.toString() || \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        photo: null,\r\n      });\r\n      setPreview(null);\r\n    }\r\n  }, [editMode, editUser, reset]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(formState.errors).length === 0) {\r\n      setShowValidationError(false);\r\n    }\r\n  }, [formState.errors]);\r\n\r\n  \r\n  const normalizeError = (err) => {\r\n    if (err === null || typeof err === \"undefined\") return \"\";\r\n    if (typeof err === \"string\") return err;\r\n    if (typeof err === \"number\" || typeof err === \"boolean\") return String(err);\r\n    if (Array.isArray(err)) return err.map(normalizeError).join(\", \");\r\n    if (typeof err === \"object\") {\r\n      return Object.values(err).map(normalizeError).join(\", \");\r\n    }\r\n    return String(err);\r\n  };\r\n\r\n  \r\n  const fieldMap = {\r\n    first_name: \"firstName\",\r\n    last_name: \"lastName\",\r\n    email: \"email\",\r\n    phone_number: \"phone\",\r\n    id_number: \"idNo\",\r\n    unit_number: \"unit\",\r\n    role: \"role\",\r\n    password: \"password\",\r\n    confirm_password: \"confirmPassword\",\r\n    profile_picture: \"photo\",\r\n  };\r\n\r\n  \r\n  const handleServerErrors = (errData) => {\r\n    \r\n    if (!errData) {\r\n      setServerMessage(\"Unknown server error\");\r\n      setShowValidationError(true);\r\n      return;\r\n    }\r\n\r\n    const payload = errData.errors ? errData.errors : errData;\r\n\r\n   \r\n    if (typeof payload === \"object\" && !Array.isArray(payload)) {\r\n      const keys = Object.keys(payload);\r\n      const looksLikeFieldErrors = keys.some((k) => {\r\n        return (\r\n          Object.prototype.hasOwnProperty.call(fieldMap, k) ||\r\n          \r\n          [\"email\", \"firstName\", \"lastName\", \"phone\", \"idNo\", \"unit\", \"role\", \"photo\"].includes(k)\r\n        );\r\n      });\r\n\r\n      if (looksLikeFieldErrors) {\r\n        \r\n        setServerMessage(\"\");\r\n\r\n        keys.forEach((field) => {\r\n          const mappedField = fieldMap[field] || field;\r\n          const normalized = normalizeError(payload[field]);\r\n\r\n          \r\n          try {\r\n            setError(mappedField, {\r\n              type: \"server\",\r\n              message: normalized,\r\n            });\r\n          } catch (e) {\r\n            \r\n            setServerMessage((prev) =>\r\n              prev ? `${prev}; ${mappedField}: ${normalized}` : `${mappedField}: ${normalized}`\r\n            );\r\n          }\r\n        });\r\n\r\n        setShowValidationError(true);\r\n        const firstField = keys[0];\r\n        const mappedFirst = fieldMap[firstField] || firstField;\r\n        \r\n        try {\r\n          setFocus(mappedFirst);\r\n        } catch (e) {\r\n        \r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    \r\n    const generic = normalizeError(errData.detail ?? errData);\r\n    setServerMessage(generic || \"An error occurred. Please try again.\");\r\n    setShowValidationError(true);\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    setServerMessage(\"\");\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"first_name\", values.firstName);\r\n      formData.append(\"last_name\", values.lastName);\r\n      formData.append(\"email\", values.email);\r\n      formData.append(\"phone_number\", values.phone);\r\n      formData.append(\"id_number\", values.idNo);\r\n      formData.append(\"unit_number\", values.unit);\r\n      formData.append(\"role\", values.role);\r\n      if (values.password) formData.append(\"password\", values.password);\r\n      if (values.photo) formData.append(\"profile_picture\", values.photo);\r\n\r\n      if (editMode) {\r\n        await userService.updateUser(editUser.id, formData);\r\n      } else {\r\n        const addedUser = await userService.addUser(formData);\r\n        if (setUsers) setUsers((prev) => [...prev, addedUser]);\r\n      }\r\n\r\n     \r\n      reset();\r\n      setPreview(null);\r\n      navigate(\"/userspage\");\r\n    } catch (error) {\r\n      \r\n      console.error(\"Error submitting user:\", error);\r\n\r\n      \r\n      const respData = error?.response?.data;\r\n      if (respData) {\r\n        handleServerErrors(respData);\r\n      } else {\r\n       \r\n        setServerMessage(error?.message ?? \"Failed to submit user. Please try again.\");\r\n        setShowValidationError(true);\r\n      }\r\n    }\r\n  };\r\n\r\n \r\n  const showFieldError = (name) => {\r\n    return (\r\n      !!formState.errors[name] &&\r\n      (showValidationError || formState.touchedFields[name] || formState.isSubmitted)\r\n    );\r\n  };\r\n\r\n  \r\n  const renderServerMessage = () => {\r\n    if (!serverMessage) return null;\r\n   \r\n    return (\r\n      <div className=\"bg-red-50 text-red-700 border border-red-200 px-3 py-2 rounded text-sm\">\r\n        {serverMessage}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-[#EEEAFD]\">\r\n      <Layout>\r\n        <div className=\"p-4 md:p-6 flex justify-center\">\r\n          <div className=\"bg-white rounded-xl p-6 sm:p-8 shadow-lg w-full max-w-4xl\">\r\n            <h2 className=\"text-xl font-semibold mb-6 text-gray-800\">\r\n              {editMode ? \"Edit User\" : title}\r\n            </h2>\r\n\r\n            <Form {...form}>\r\n              <form\r\n                noValidate\r\n                onSubmit={handleSubmit(onSubmit, (errors) => {\r\n                  setShowValidationError(true);\r\n                  trigger();\r\n                  const first = Object.keys(errors)[0];\r\n                  if (first) setFocus(first);\r\n                })}\r\n                className=\"space-y-6\"\r\n              >\r\n                {showValidationError && (\r\n                  <div className=\"bg-red-100 text-red-800 border border-red-400 px-4 py-3 rounded-md text-sm\">\r\n                    Please fix the errors in the form before submitting.\r\n                  </div>\r\n                )}\r\n\r\n               \r\n                {renderServerMessage()}\r\n\r\n                <FormField\r\n                  control={control}\r\n                  name=\"role\"\r\n                  render={({ field }) => {\r\n                    const errorMsg = normalizeError(formState.errors.role?.message);\r\n                    return (\r\n                      <FormItem>\r\n                        <RequiredLabel>Role</RequiredLabel>\r\n                        <Select\r\n                          onValueChange={field.onChange}\r\n                          value={field.value}\r\n                          onBlur={field.onBlur}\r\n                        >\r\n                          <FormControl>\r\n                            <SelectTrigger\r\n                              className={`bg-[#f4eaff] ${showFieldError(\"role\") ? \"border border-red-500\" : \"\"}`}\r\n                            >\r\n                              <SelectValue placeholder=\"Select a role\" />\r\n                            </SelectTrigger>\r\n                          </FormControl>\r\n                          <SelectContent>\r\n                            <SelectItem value=\"tenant\">Resident</SelectItem>\r\n                            <SelectItem value=\"security\">Security</SelectItem>\r\n                            <SelectItem value=\"admin\">Admin</SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                        {showFieldError(\"role\") && (\r\n                          <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n                        )}\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    );\r\n                  }}\r\n                />\r\n\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\r\n                  {[\r\n                    [\"firstName\", \"First Name\"],\r\n                    [\"lastName\", \"Last Name\"],\r\n                    [\"email\", \"Email\"],\r\n                  ].map(([name, label]) => (\r\n                    <FormField\r\n                      key={name}\r\n                      control={control}\r\n                      name={name}\r\n                      render={({ field }) => {\r\n                        const errorMsg = normalizeError(formState.errors[name]?.message);\r\n                        return (\r\n                          <FormItem>\r\n                            <RequiredLabel>{label}</RequiredLabel>\r\n                            <FormControl>\r\n                              <Input\r\n                                className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n                                placeholder={`Enter ${label}`}\r\n                                {...field}\r\n                              />\r\n                            </FormControl>\r\n                            {showFieldError(name) && (\r\n                              <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n                            )}\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        );\r\n                      }}\r\n                    />\r\n                  ))}\r\n                </div>\r\n\r\n               \r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\r\n                  {[\r\n                    [\"phone\", \"Phone No.\"],\r\n                    [\"idNo\", \"ID No.\"],\r\n                  ].map(([name, label]) => (\r\n                    <FormField\r\n                      key={name}\r\n                      control={control}\r\n                      name={name}\r\n                      render={({ field }) => {\r\n                        const errorMsg = normalizeError(formState.errors[name]?.message);\r\n                        return (\r\n                          <FormItem>\r\n                            <RequiredLabel>{label}</RequiredLabel>\r\n                            <FormControl>\r\n                              <Input\r\n                                className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n                                placeholder={`Enter ${label}`}\r\n                                {...field}\r\n                              />\r\n                            </FormControl>\r\n                            {showFieldError(name) && (\r\n                              <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n                            )}\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        );\r\n                      }}\r\n                    />\r\n                  ))}\r\n                  <FormField\r\n                    control={control}\r\n                    name=\"unit\"\r\n                    render={({ field }) => {\r\n                      const errorMsg = normalizeError(formState.errors.unit?.message);\r\n                      return (\r\n                        <FormItem>\r\n                          <RequiredLabel>Unit</RequiredLabel>\r\n                          <Select\r\n                            onValueChange={field.onChange}\r\n                            value={field.value}\r\n                            onBlur={field.onBlur}\r\n                          >\r\n                            <FormControl>\r\n                              <SelectTrigger\r\n                                className={`bg-[#f4eaff] ${showFieldError(\"unit\") ? \"border border-red-500\" : \"\"}`}\r\n                              >\r\n                                <SelectValue placeholder=\"Select a unit\" />\r\n                              </SelectTrigger>\r\n                            </FormControl>\r\n                            <SelectContent>\r\n                              {units.map((unit) => (\r\n                                <SelectItem key={unit.id} value={String(unit.id)}>\r\n                                  {unit.unit_name}\r\n                                </SelectItem>\r\n                              ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                          {showFieldError(\"unit\") && (\r\n                            <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n                          )}\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                {!editMode && (\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                    {[\r\n                      [\"password\", \"Password\"],\r\n                      [\"confirmPassword\", \"Confirm Password\"],\r\n                    ].map(([name, label]) => (\r\n                      <FormField\r\n                        key={name}\r\n                        control={control}\r\n                        name={name}\r\n                        render={({ field }) => {\r\n                          const errorMsg = normalizeError(formState.errors[name]?.message);\r\n                          return (\r\n                            <FormItem>\r\n                              <RequiredLabel>{label}</RequiredLabel>\r\n                              <FormControl>\r\n                                <Input\r\n                                  type=\"password\"\r\n                                  className={`bg-[#f4eaff] ${showFieldError(name) ? \"border border-red-500 ring-1 ring-red-500\" : \"\"}`}\r\n                                  placeholder={`Enter ${label}`}\r\n                                  {...field}\r\n                                />\r\n                              </FormControl>\r\n                              {showFieldError(name) && (\r\n                                <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n                              )}\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          );\r\n                        }}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n\r\n               \r\n                <FormField\r\n                  control={control}\r\n                  name=\"photo\"\r\n                  render={({ field: { onChange } }) => {\r\n                    const errorMsg = normalizeError(formState.errors.photo?.message);\r\n                    return (\r\n                      <FormItem>\r\n                        <FormLabel className=\"font-medium\">Photo</FormLabel>\r\n                        <FormControl>\r\n                          <div className=\"bg-[#f4eaff] h-28 rounded-md border border-dashed flex items-center justify-center text-sm text-gray-500 relative overflow-hidden\">\r\n                            <input\r\n                              type=\"file\"\r\n                              onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                  setPreview(URL.createObjectURL(file));\r\n                                  onChange(file);\r\n                                }\r\n                              }}\r\n                              accept=\"image/*\"\r\n                              className=\"opacity-0 absolute w-full h-full cursor-pointer\"\r\n                            />\r\n                            {preview ? (\r\n                              <img\r\n                                src={preview}\r\n                                alt=\"Preview\"\r\n                                className=\"absolute inset-0 w-full h-full object-cover\"\r\n                              />\r\n                            ) : (\r\n                              <div className=\"flex flex-col items-center gap-2\">\r\n                                <div className=\"bg-[#085ca10d] rounded-full p-2 w-12 h-12 flex items-center justify-center\">\r\n                                  <img src={uploadIcon} alt=\"Upload\" className=\"w-6 h-6\" />\r\n                                </div>\r\n                                <span className=\"text-sm text-gray-500 text-center\">\r\n                                  Upload a User’s Photo\r\n                                </span>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </FormControl>\r\n                        {showFieldError(\"photo\") && (\r\n                          <p className=\"text-red-500 text-sm mt-1\">{errorMsg}</p>\r\n                        )}\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    );\r\n                  }}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full bg-[#005E0E] hover:bg-gradient-to-r hover:from-indigo-500 hover:to-v text-white font-semibold py-2 rounded-md shadow-md transition-all duration-300\"\r\n                >\r\n                  {editMode ? \"Update\" : submitLabel}\r\n                </Button>\r\n              </form>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserForm;\r\nexport const UserFormSchema = formSchema;\r\n"
        }
    ]
}