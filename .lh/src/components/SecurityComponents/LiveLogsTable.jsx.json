{
    "sourceFile": "src/components/SecurityComponents/LiveLogsTable.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755504608168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755504608168,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { MoreHorizontal } from \"lucide-react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n/**\r\n * @param {{\r\n *   visitorData: Array,\r\n *   isLoading?: boolean,\r\n *   title?: string,\r\n *   entriesPerPage?: number\r\n * }} props\r\n */\r\nexport default function LiveLogsTable({\r\n  visitorData = [],\r\n  isLoading = false,\r\n  title = \"Expected Visitors\",\r\n  entriesPerPage = 5,\r\n}) {\r\n  const [currentPage/*, setCurrentPage*/] = useState(1);\r\n  const [dropdownOpen, setDropdownOpen] = useState(null);\r\n  const dropdownRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  const paginatedVisitors = visitorData.slice(\r\n    (currentPage - 1) * entriesPerPage,\r\n    currentPage * entriesPerPage\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setDropdownOpen(null);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  const toggleDropdown = (index) => {\r\n    setDropdownOpen(dropdownOpen === index ? null : index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-7xl mx-auto bg-white rounded-xl shadow-sm mt-5\">\r\n      <div className=\"flex justify-between items-center p-6 mb-4\">\r\n        <h2 className=\"text-2xl font-semibold\">{title}</h2>\r\n      </div>\r\n\r\n      <div className=\"p-4\">\r\n        <Table className=\"w-full\">\r\n          <TableHeader>\r\n            <TableRow className=\"bg-[#F5F6FA] text-[#3A3F51]\">\r\n              <TableHead className=\"text-sm font-semibold px-4 py-3\">\r\n                Visitor Name\r\n              </TableHead>\r\n              <TableHead className=\"text-sm font-semibold px-4 py-3\">\r\n                Phone No.\r\n              </TableHead>\r\n              <TableHead className=\"text-sm font-semibold px-4 py-3\">\r\n                Visit Unit\r\n              </TableHead>\r\n              <TableHead className=\"text-sm font-semibold px-4 py-3\">\r\n                Visitor Type\r\n              </TableHead>\r\n              <TableHead className=\"text-sm font-semibold px-4 py-3 text-center\">\r\n                Action\r\n              </TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n\r\n          <TableBody>\r\n            {isLoading ? (\r\n              <TableRow>\r\n                <TableCell colSpan={5} className=\"text-center py-10 text-gray-500\">\r\n                  Loading visitors...\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : paginatedVisitors.length === 0 ? (\r\n              <TableRow>\r\n                <TableCell colSpan={5} className=\"text-center py-10 text-gray-500\">\r\n                  No visitors found.\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              paginatedVisitors.map((visitor, index) => (\r\n                <TableRow\r\n                  key={index}\r\n                  className=\"bg-white rounded-lg hover:shadow-md transition duration-200\"\r\n                >\r\n                  <TableCell className=\"px-4 py-4 font-medium text-[#171B1E]\">\r\n                    {visitor.full_name}\r\n                  </TableCell>\r\n                  <TableCell className=\"px-4 py-4 text-[#464F60]\">\r\n                    {visitor.phone_number}\r\n                  </TableCell>\r\n                  <TableCell className=\"px-4 py-4 text-[#464F60]\">\r\n                    {visitor.unit_number || \"--\"}\r\n                  </TableCell>\r\n                  <TableCell className=\"px-4 py-4 text-[#464F60]\">\r\n                    {visitor.visitor_type || \"--\"}\r\n                  </TableCell>\r\n                  <TableCell className=\"px-4 py-4 text-center\">\r\n                    <div\r\n                      ref={dropdownRef}\r\n                      className=\"relative inline-block text-left\"\r\n                    >\r\n                      <button\r\n                        onClick={() => toggleDropdown(index)}\r\n                        className=\"p-2 rounded hover:bg-gray-100\"\r\n                      >\r\n                        <MoreHorizontal className=\"h-5 w-5 text-gray-600\" />\r\n                      </button>\r\n                      {dropdownOpen === index && (\r\n                        <div className=\"absolute right-0 z-10 mt-2 w-28 bg-white border rounded shadow-lg\">\r\n                          <button\r\n                            onClick={() =>\r\n                              import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useExpectedVisitors } from \"../../hooks/useExpectedVisitors\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\n\r\nimport { Upload, ChevronDown, MoreHorizontal } from \"lucide-react\";\r\n\r\nexport default function ExpectedVisitors() {\r\n  const { expectedVisitors, loading } = useExpectedVisitors();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [entriesPerPage, setEntriesPerPage] = useState(5);\r\n  const [visitorTypeFilter, setVisitorTypeFilter] = useState(\"all\");\r\n  const [dropdownOpen, setDropdownOpen] = useState(null);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const filteredVisitors =\r\n    visitorTypeFilter === \"all\"\r\n      ? expectedVisitors\r\n      : expectedVisitors.filter((v) => v.visitor_type === visitorTypeFilter);\r\n\r\n  const totalEntries = filteredVisitors.length;\r\n  const totalPages = Math.ceil(totalEntries / entriesPerPage);\r\n  const startIndex = (currentPage - 1) * entriesPerPage;\r\n  const currentVisitors = filteredVisitors.slice(\r\n    startIndex,\r\n    startIndex + entriesPerPage\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setDropdownOpen(null);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  const toggleDropdown = (index) => {\r\n    setDropdownOpen(dropdownOpen === index ? null : index);\r\n  };\r\n\r\n  const handleExportCSV = () => {\r\n    const headers = [\"Name\", \"Phone\", \"Visitor Type\", \"Host/Unit\", \"Visit Date\"];\r\n    const rows = filteredVisitors.map((v) => [\r\n      v.full_name || \"N/A\",\r\n      v.phone_number || \"N/A\",\r\n      v.visitor_type || \"N/A\",\r\n      v.unit_number || \"N/A\",\r\n      v.visit_date || \"N/A\",\r\n    ]);\r\n\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,\" +\r\n      [headers, ...rows].map((row) => row.join(\",\")).join(\"\\n\");\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement(\"a\");\r\n    link.href = encodedUri;\r\n    link.download = \"expected_visitors.csv\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full max-w-7xl mx-auto bg-white rounded-xl shadow-sm mt-5\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center p-6 mb-4 border-b border-[rgba(0,0,0,0.3)]\">\r\n          <h2 className=\"text-2xl font-semibold\">Expected Visitors</h2>\r\n          <button\r\n            onClick={handleExportCSV}\r\n            className=\"flex items-center gap-2 h-12 px-4 pr-6 bg-[#005E0E] text-white rounded-lg hover:bg-[#123107] transition\"\r\n          >\r\n            <Upload />\r\n            Export\r\n          </button>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"flex justify-between items-center px-6\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-sm text-gray-600\">Show</span>\r\n            <div className=\"relative\">\r\n              <select\r\n                className=\"border border-gray-300 rounded-md px-3 py-2 text-sm bg-white min-w-16 appearance-none pr-8\"\r\n                value={entriesPerPage}\r\n                onChange={(e) => {\r\n                  setEntriesPerPage(Number(e.target.value));\r\n                  setCurrentPage(1);\r\n                }}\r\n              >\r\n                {[5, 10, 25, 50].map((value) => (\r\n                  <option key={value} value={value}>{value}</option>\r\n                ))}\r\n              </select>\r\n              <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\r\n            </div>\r\n            <span className=\"text-sm text-gray-600\">entries</span>\r\n          </div>\r\n\r\n          <div className=\"relative\">\r\n            <select\r\n              className=\"border border-gray-300 rounded-md px-3 py-2 text-sm bg-white min-w-24 appearance-none pr-8\"\r\n              value={visitorTypeFilter}\r\n              onChange={(e) => {\r\n                setVisitorTypeFilter(e.target.value);\r\n                setCurrentPage(1);\r\n              }}\r\n            >\r\n              <option value=\"all\">All</option>\r\n              <option value=\"visitor\">Visitor</option>\r\n              <option value=\"service\">Service</option>\r\n              <option value=\"recurring\">Recurring</option>\r\n            </select>\r\n            <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Table */}\r\n        <div className=\"p-4\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Visitor Name</TableHead>\r\n                <TableHead>Phone No.</TableHead>\r\n                <TableHead>Visit Unit</TableHead>\r\n                <TableHead>Visitor Type</TableHead>\r\n                <TableHead>Visit Date</TableHead>\r\n                <TableHead>Action</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {loading ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center text-gray-500 py-10\">\r\n                    Loading...\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : currentVisitors.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center text-gray-500 py-10\">\r\n                    No visitors found.\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                currentVisitors.map((visitor, index) => (\r\n                  <TableRow key={visitor.id || index}>\r\n                    <TableCell className=\"font-medium\">{visitor.full_name || \"N/A\"}</TableCell>\r\n                    <TableCell>{visitor.phone_number || \"N/A\"}</TableCell>\r\n                    <TableCell>{visitor.unit_number || \"N/A\"}</TableCell>\r\n                    <TableCell className=\"capitalize\">{visitor.visitor_type || \"N/A\"}</TableCell>\r\n                    <TableCell>{visitor.visit_date || \"N/A\"}</TableCell>\r\n                    <TableCell className=\"relative\" ref={dropdownRef}>\r\n                      <MoreHorizontal\r\n                        className=\"cursor-pointer text-muted-foreground\"\r\n                        onClick={() => toggleDropdown(index)}\r\n                      />\r\n                      {dropdownOpen === index && (\r\n                        <div className=\"absolute right-0 z-10 mt-2 w-28 bg-white border rounded shadow-lg\">\r\n                          <button\r\n                            onClick={() => navigate(`/view/${visitor.id}`)}\r\n                            className=\"block w-full text-left px-4 py-2 text-sm hover:bg-gray-100\"\r\n                          >\r\n                            View\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      <div className=\"mt-4 flex flex-col sm:flex-row items-center justify-between w-full px-4 gap-4\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}\r\n            disabled={currentPage === 1}\r\n            className=\"h-12 px-6 border border-[#005E0E] rounded-lg bg-white text-[#005E0E] hover:bg-[#f4fdf5] disabled:opacity-50\"\r\n          >\r\n            Previous\r\n          </button>\r\n          <span className=\"w-14 h-12 flex items-center justify-center bg-[#005E0E] text-white rounded-lg\">\r\n            {currentPage}\r\n          </span>\r\n          <button\r\n            onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}\r\n            disabled={currentPage === totalPages}\r\n            className=\"h-12 px-6 border border-[#005E0E] rounded-lg bg-white text-[#005E0E] hover:bg-[#f4fdf5] disabled:opacity-50\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n        <div className=\"text-sm text-gray-600\">\r\n          Showing {startIndex + 1} to {Math.min(startIndex + entriesPerPage, totalEntries)} of {totalEntries} entries\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n                            }\r\n                            className=\"block w-full text-left px-4 py-2 text-sm hover:bg-gray-100\"\r\n                          >\r\n                            View\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}